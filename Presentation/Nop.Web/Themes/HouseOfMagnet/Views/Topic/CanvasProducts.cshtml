@model TopicModel
@using Nop.Web.Models.Catalog;
@using Nop.Web.Models.Topics;
@using Nop.Core.Infrastructure;
@using Nop.Services.Logging;
@using Nop.Services.Catalog;
@using Nop.Core.Domain.Catalog;
@using System.Web.Script.Serialization;
@using Nop.Plugin.Payments.GBS;
@using System.Data;
@using System.Xml;
@using Nop.Core;
@using Nop.Core.Domain.Orders;
@using Nop.Services.Orders;

@{
    DBManager db = new DBManager();
    string page = string.Empty;
    //try
    //{
    int prodId = Convert.ToInt32(Request.QueryString["id"]);
    int cartId = Convert.ToInt32(Request.QueryString["cartid"]);
    int cartItemID = (!string.IsNullOrEmpty(Request.QueryString["updatecartitemid"])) ? Convert.ToInt32(Request.QueryString["updatecartitemid"]) : 0;
    string qty = (!string.IsNullOrEmpty(Request.QueryString["qty"])) ? Request.QueryString["qty"] : "";
    string sku = Request.QueryString["sku"];
    string iframeData = string.Empty;
    var SpecAttr = EngineContext.Current.Resolve<ISpecificationAttributeService>();
    var workContext = EngineContext.Current.Resolve<IWorkContext>();
    var _storeContext = EngineContext.Current.Resolve<IStoreContext>();
    var attributeService = EngineContext.Current.Resolve<IProductAttributeService>();
    var attributeParser = EngineContext.Current.Resolve<IProductAttributeParser>();
    var attributeFormatter = EngineContext.Current.Resolve<IProductAttributeFormatter>();
    var CurrentSpecAttr = (IList<ProductSpecificationAttribute>)SpecAttr.GetProductSpecificationAttributes(prodId);
    string attributeXml = string.Empty;
    bool editActive = false;
    string pageId = string.Empty;

    //string productXml = string.Empty;
    //Set iframe url
    foreach (var item in CurrentSpecAttr)
    {

        if (item.SpecificationAttributeOption.SpecificationAttribute.Name == "IframeURL")
        {
            page = item.SpecificationAttributeOption.Name;
        }

        if (item.SpecificationAttributeOption.SpecificationAttribute.Name == "PageId")
        {
            pageId = item.SpecificationAttributeOption.Name;
        }
    }


    //Handles edit from cart
    if (cartItemID != 0)
    {
        var customer = workContext.CurrentCustomer;
        var cart = customer.ShoppingCartItems
                      .Where(sci => sci.ShoppingCartType == ShoppingCartType.ShoppingCart)
                      .LimitPerStore(_storeContext.CurrentStore.Id)
                      .ToList();
        foreach (var item in cart)
        {
            if (item.Id == cartItemID)
            {
                attributeXml = item.AttributesXml;
            }
        }
        XmlDocument xmldoc = new XmlDocument();
        xmldoc.LoadXml(attributeXml);
        XmlNodeList nodeList = xmldoc.GetElementsByTagName("ProductAttribute");
        var node = xmldoc.FirstChild.FirstChild.InnerText;

        iframeData = node;
        editActive = true;
    }
    page = page + sku + "&qty=" + qty + "&id=" + cartItemID + "&pageid=" + pageId;
    <input type="hidden" id="hdn-edit-active" value="@editActive.ToString()" />
    <input type="hidden" id="hdn-cart-item-id" value="@cartItemID" />
    <input type="hidden" id="hdn-qty" value="@qty" />
    <input type="hidden" id="hdn-product-id" value="@prodId" />
    <input type="hidden" id="hdn-iframe-data" value="@iframeData" />

    <div class="canvas-template" style="overflow:hidden; height:1200px">
        <iframe id="canvas-iframe" src="@T("hom.url")@page" style="height:1200px; width:100%;"></iframe>
    </div>
}
<!--product attributes-->

<script type="text/javascript" src="/Themes/HouseofMagnet/Content/js/iframe-data.js"></script>
<script type="text/javascript">


    var imageUrl = '';

    var iframe = document.getElementById('canvas-iframe');


    window.addEventListener("message", function (e) {
        if (e.data == "VALIDATEUPO") {
            $("#hdn-authentice-type").val("UPO");
            if ($("#hdn-authenticated").val().toLowerCase() == "true") {

                SendEmailAfterVerification($("#hdn-customer-email").val(), "UPO");
            } else {
                $("#valid-error-summary").hide();
                $(".field-validation-error").hide();
                $("#loginModal").modal();
            }
        }
        else if (e.data == "VALIDATEBCT") {
            $("#hdn-authentice-type").val("BCT");
            if ($("#hdn-authenticated").val().toLowerCase() == "true") {

                SendEmailAfterVerification($("#hdn-customer-email").val(), "BCT");
            } else {
                $("#valid-error-summary").hide();
                $(".field-validation-error").hide();
                $("#loginModal").modal();
            }
        } else {
            addToCart(e);
        }

    }, false);
    function SendEmailAfterVerification(email, type) {
        var iframe = document.getElementById("chili-iframe").contentWindow;
        var json = JSON.stringify({ type: type, email: email });
        iframe.postMessage(json, "*");
    }
    function addToCart(e) {
        console.log(e);
        var opc = false;
        var opcAlt = false;
        var previewDisplay;

        if (e.data != "") {
            console.log(e.data);
            var json = JSON.parse(e.data);
            if (json.hasOwnProperty('misc3')) {
                opcAlt = true;
            }
            if (cartImageSrc == '') {
                previewDisplay = "undefined";
            }

            var cartImageSrc;
            var bct = false;
            for (var i = 0; i < json["data"].length; i++) {
                console.log(json["data"][i]);
                switch (json["data"][i].option) {
                    case 320:
                        cartImageSrc = json["data"][i].value;

                        break;
                    case 399:
                        opc = true;
                    case 515:
                        bct = true;
                        break
                    default:
                        previewDisplay = "undefined";
                        break;
                }

            }

            previewDisplay = (opc || opcAlt) ? cartImageSrc : "undefined";


            AddItem(e.data, $("#hdn-cart-item-id").val(), $("#hdn-qty").val(), $("#hdn-product-id").val(), previewDisplay, $("#hdn-edit-active").val());

        }
    }




</script>
@*eventer(messageEvent, function (e) {
        var cartImageSrc = JSON.parse(e.data)[536];
        AddItem(JSON.stringify(e.data), $("#hdn-cart-item-id").val(), $("#hdn-qty").val(), $("#hdn-product-id").val(), cartImageSrc, $("#hdn-edit-active").val());

    }, false);*@