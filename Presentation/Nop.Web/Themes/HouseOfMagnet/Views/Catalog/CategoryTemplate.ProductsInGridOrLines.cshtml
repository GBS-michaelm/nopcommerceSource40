@model CategoryModel
@{
    //may need to be able to edit the layout link as well
    Layout = "~/Views/Shared/_ColumnsTwo-listing.cshtml";

    IProductService productService = EngineContext.Current.Resolve<IProductService>();

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    Html.AddScriptParts("~/Themes/HouseOfMagnet/Content/js/amalgamation.js");

    var themeName = EngineContext.Current.Resolve<IThemeContext>().WorkingThemeName;
    Html.AppendCssFileParts(string.Format("~/Themes/{0}/Content/css/hom-amalgamation.css", themeName));

    var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(categoryUrl);
    }
    ViewBag.catId = Model.Id;

    var breadcrumbDelimiter = EngineContext.Current.Resolve<CommonSettings>().BreadcrumbDelimiter;
}
@using Nop.Core.Domain.Common;
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@using Nop.Plugin.DataAccess.GBS;
@using System.Data;
@using Nop.Web.Framework.Themes
@using Nop.Services.Catalog;
@using Nop.Core.Domain.Catalog;
@*category breadcrumb*@

@{ 
    //bool amalgamation = false;
    string productBoxLink = "";
    int masterCategoryId = 0;
    int featuredProductId = 0;
}
@{ 

    DBManager manager = new DBManager();

    string amalgamationDataQuery = "EXEC usp_SelectGBSAmalgamationMaster @categoryId";
    Dictionary<string, Object> amalgamationDic = new Dictionary<string, Object>();
    amalgamationDic.Add("@CategoryId", Model.Id);
    DataView amalgamationDataView = manager.GetParameterizedDataView(amalgamationDataQuery, amalgamationDic);
    bool amalgamation = false;

    if (amalgamationDataView.Count > 0)
    {
        masterCategoryId = Int32.Parse(amalgamationDataView[0]["masterCategoryId"].ToString());

        string featuredProductDataQuery = "usp_SelectGBSCustomCategoryData @categoryId";
        Dictionary<string, Object> featuredProductDic = new Dictionary<string, Object>();
        featuredProductDic.Add("@CategoryId", masterCategoryId);
        DataView featuredProductDataView = manager.GetParameterizedDataView(featuredProductDataQuery, featuredProductDic);

        if (featuredProductDataView.Count > 0)
        {
            featuredProductId = Int32.Parse(featuredProductDataView[0]["FeaturedProductId"].ToString());
        }

        //amalgamation = true;
        productBoxLink = "_ProductBoxAmalgamation";
        amalgamation = true;
    }
    else
    {
        productBoxLink = "_ProductBox";
    }

}
@*@Html.Widget("category_tabs", Model.Id)*@
@Html.Widget("categorydetails_after_breadcrumb", Model.Id)


<div class="page category-page">
    <div class="page-body">
        <div class="pager clearfix">
            @{

                var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
            }
            @if (!pager.IsEmpty())
            {
                @pager
            }
            @Html.Widget("categorydetails_bottom", Model.Id)
        </div>
        @Html.Widget("categorydetails_top", Model.Id)
        @*description*@
        @*@if (!String.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }*@
        @Html.Widget("categorydetails_before_subcategories", Model.Id)
        @*subcategories*@
        @*@if (Model.SubCategories.Count > 0)
        {
            <div class="sub-category-grid row">
                @if (Model.SubCategories.Count <= 3)
                {
                    foreach (var item in Model.SubCategories)
                    {
                        <div class="item-box col-xs-12 col-sm-4 col-md-4">
                            <div class="sub-category-item product-category-item">
                                <div class="picture">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title" class="product-img">
                                        <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                    </a>
                                    <div class="title">
                                        <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title"> @item.Name</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div id="sub-category-slider" class="sub-category-slider">
                        @foreach (var item in Model.SubCategories)
                        {
                            <div class="item-box col-xs-12 col-sm-12 col-md-12">
                                <div class="sub-category-item product-category-item">
                                    <div class="picture">
                                        <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title" class="product-img">
                                            <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                        </a>
                                        <div class="title">
                                            <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title"> @item.Name</a>
                                        </div>
                                    </div>
                                </div>
                           </div>
                        }
                    </div>
                }
            </div>
        }*@
        @Html.Widget("categorydetails_before_featured_products", Model.Id)
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="featured-product-grid">
                <div class="page-title panel-heading">
                    <h1>@T("Products.FeaturedProducts")</h1>
                </div>
                <div class="row">
                    <div class="product-grid">
                        @foreach (var item in Model.FeaturedProducts)
                        {
                            if (amalgamation)
                            {
                                item.CustomProperties.Add("featuredProductId", featuredProductId);
                                item.CustomProperties.Add("masterCategoryId", masterCategoryId);
                                

                                <div class="item-box product-grid col-xs-12 col-sm-4 col-md-4 product-align">
                                    <div class="thumbnail">

                                        @{
                                            var amalgamationID = 00;

                                            IList<Product> associatedProductList = productService.GetAssociatedProducts(item.Id);
                                            if (associatedProductList.Count > 0)
                                            {
                                                ISpecificationAttributeService specService = EngineContext.Current.Resolve<ISpecificationAttributeService>();

                                                foreach (var groupedproduct in associatedProductList)
                                                {
                                                    string type = "";

                                                    var specAttrs = specService.GetProductSpecificationAttributes(groupedproduct.Id);

                                                    //IList<ProductSpecificationAttribute> list = specService.GetProductSpecificationAttributes(productId);

                                                    foreach (var spec in specAttrs)
                                                    {
                                                        if (spec.SpecificationAttributeOption.SpecificationAttribute.Name == "Pack Type")
                                                        {
                                                            type = spec.SpecificationAttributeOption.Name;

                                                            if (type == "Carton")
                                                            {
                                                                amalgamationID = groupedproduct.Id;
                                                                item.CustomProperties.Add("ButtonId", amalgamationID);
                                                                item.CustomProperties.Add("textBoxId", amalgamationID);
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                break;
                                                            }

                                                        }

                                                    }
                                                }
                                            }
                                            else
                                            {
                                                amalgamationID = Model.Id;
                                            }
                                        }

                                        @{
                                            var dataDictAddToCart = new ViewDataDictionary();
                                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", amalgamationID);
                                        }

                                        @Html.Partial(productBoxLink, item, dataDictAddToCart)
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="item-box product-grid col-xs-12 col-sm-4 col-md-4 product-align">
                                    <div class="thumbnail">
                                        @Html.Partial(productBoxLink, item)
                                    </div>
                                </div>
                                }


                            }
                    </div>
                </div>
            </div>
        }
        @Html.Widget("categorydetails_after_featured_products", Model.Id)
        @if (Model.Products.Count > 0)
                        {
                            @Html.Partial("_CatalogSelectors", Model.PagingFilteringContext, new ViewDataDictionary())
        }
                        @Html.Widget("categorydetails_before_filters", Model.Id)

        @*<div class="product-filters-wrapper">
            @*filtering*@
          @*  @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
    {
       @* <div class="well">
            @Html.Partial("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter, new ViewDataDictionary())
        </div>
    }
    @*filtering*@
       @*     @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
        {
            @Html.Partial("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter, new ViewDataDictionary())
        }
    </div>*@


        @Html.Widget("categorydetails_before_product_list", Model.Id) 
        @*product grid and list*@
        @if (Model.Products.Count > 0)
        {
            @*<div class="product-grid clearfix">*@
 <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list col-xs-12 col-sm-12 col-md-12 product-align" : "product-grid col-xs-12 col-sm-4 col-md-4 product-align")">
                <div class="row">  
                    @foreach (var product in Model.Products)
                    {
                        if (amalgamation)
                        {
                            product.CustomProperties.Add("featuredProductId", featuredProductId);
                            product.CustomProperties.Add("masterCategoryId", masterCategoryId);
                            
                            <div class="item-box">
                                <div class="thumbnail">
                                    @{
                                        var amalgamationID = 00;

                                        IList<Product> associatedProductList = productService.GetAssociatedProducts(product.Id);
                                        if (associatedProductList.Count > 0)
                                        {
                                            ISpecificationAttributeService specService = EngineContext.Current.Resolve<ISpecificationAttributeService>();

                                            foreach (var groupedproduct in associatedProductList)
                                            {
                                                string type = "";

                                                var specAttrs = specService.GetProductSpecificationAttributes(groupedproduct.Id);

                                                //IList<ProductSpecificationAttribute> list = specService.GetProductSpecificationAttributes(productId);

                                                foreach (var spec in specAttrs)
                                                {
                                                    if (spec.SpecificationAttributeOption.SpecificationAttribute.Name == "Pack Type")
                                                    {
                                                        type = spec.SpecificationAttributeOption.Name;

                                                        if (type == "Carton")
                                                        {
                                                            amalgamationID = groupedproduct.Id;
                                                            product.CustomProperties.Add("ButtonId", amalgamationID);
                                                            product.CustomProperties.Add("textBoxId", amalgamationID);
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            break;
                                                        }

                                                    }

                                                }
                                            }
                                        }
                                        else
                                        {
                                            amalgamationID = Model.Id;
                                        }
                                    }
                                    @{
                                        var dataDictAddToCart = new ViewDataDictionary();
                                        dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", amalgamationID);
                                    }

                                    @Html.Partial(productBoxLink, product, dataDictAddToCart)
                                </div>
                            </div>
                            }
                            else
                            {
                            <div class="item-box">
                                <div class="thumbnail">
                                    @Html.Partial(productBoxLink, product)
                                </div>
                            </div>
                        }
                        
                    }
                </div>    
            </div>
        }

        <div class="pager clearfix">
            @{

                pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
            }
            @if (!pager.IsEmpty())
            {
                @pager
            }
            @Html.Widget("categorydetails_bottom", Model.Id)
        </div>
    </div>

    <div id="amalgamationBarSection" style="display: none;">
        @{
            if (amalgamation)
            {

                Model.CustomProperties.Add("BarType", "Gallery");

                @Html.Partial("_AmalgamationBar");
            }
        }
    </div>
    
</div>
