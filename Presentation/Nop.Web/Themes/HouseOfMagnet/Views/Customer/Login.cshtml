@model LoginModel
@using System.Net
@using Nop.Core
@inject IWebHelper webHelper
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    Html.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!string.IsNullOrEmpty(this.Context.Request.Query["returnUrl"]))
    {
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + WebUtility.UrlEncode(this.Context.Request.Query["returnUrl"]), null);
    }
}
<div class="page login-page">
    <div class="page-title panel-heading">
        <h1>@T("Account.Login.Welcome")</h1>
    </div>
    @await Html.PartialAsync("_ExternalAuthentication.Errors")
    <div class="page-body">
        <div class="customer-blocks">
            @if (Model.CheckoutAsGuest)
    {
        <div class="col-sm-6 col-md-6">
            <div class="new-wrapper checkout-as-guest-or-register-block">
                <div class="title">
                    <strong>@T("Account.Login.CheckoutAsGuestOrRegister")</strong>
                </div>
                <div class="text">
                    @await Component.InvokeAsync("TopicBlock", new { systemName = "CheckoutAsGuestOrRegister" })
                </div>
                <div class="buttons col-sm-offset-1 col-md-offset-1 col-md-10">
                    @*<input type="button" class="button-1 checkout-as-guest-button" onclick="location.href='@Url.RouteUrl("Checkout")'" value="@T("Account.Login.CheckoutAsGuest")" />*@
                    <button type="button" class="button-1 checkout-as-guest-button button button-3d button-rounded button-darkgreen" onclick="location.href='@Url.RouteUrl("Checkout")'"><i class="icon-line2-login"></i>@T("Account.Login.CheckoutAsGuest")</button>
                    @*<input type="button" class="button-1 register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />*@
                    <button type="button" class="button-1 register-button button button-3d button-rounded button-darkgreen" onclick="location.href='@registerUrl'"><i class="icon-user"></i>@T("Account.Register")</button>
                </div>
            </div>
        </div>
}
else
{
        <div class="col-sm-6 col-md-6">
            <div class="new-wrapper register-block">
                <div class="title">
                    <strong>@T("Account.Login.NewCustomer")</strong>
                </div>
                <div class="text">
                    @T("Account.Login.NewCustomerText")
                </div>
                <div class="buttons controls">
                    @*<input type="button" class="button-1 register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />*@
                    <button type="button" class="button-1 register-button button button-3d button-rounded button-darkgreen" onclick="location.href='@registerUrl'"><i class="icon-user"></i>@T("Account.Register")</button>
                </div>
            </div>
        </div>
}
        <div class="col-sm-6 col-md-6">
            <div class="returning-wrapper fieldset">
                <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post">
                    <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
                    <div class="title">
                        <strong>@T("Account.Login.ReturningCustomer")</strong>
                    </div>
                    <div class="form-fields form-horizontal">
                        @if (Model.UsernamesEnabled)
                {
                        <div class="inputs form-group">
                            <label class="col-xs-12 col-sm-12 col-md-12 control-label" asp-for="Username" asp-postfix=":"></label>
                            <div class="col-md-12">
                                <input asp-for="Username" class="username form-control" autofocus="autofocus" />
                                <span asp-validation-for="Username"></span>
                            </div>
                            </div>
                            }
                            else
                            {
                        <div class="inputs form-group">
                            <label class="col-xs-12 col-sm-12 col-md-12 control-label" asp-for="Email" asp-postfix=":"></label>
                            <div class="col-md-12">
                                <input asp-for="Email" class="email form-control" autofocus="autofocus" />
                                <span asp-validation-for="Email"></span>
                            </div>
                        </div>
                            }
                        <div class="inputs form-group">
                            <label class="col-xs-12 col-sm-12 col-md-12 control-label" asp-for="Password" asp-postfix=":"></label>
                            <div class="col-md-12">
                                <input asp-for="Password" class="password form-control" />
                                <span asp-validation-for="Password"></span>
                            </div>
                        </div>
                        <div class="inputs reversed form-group">
                            <div class="remember-me">
                                <div class="checkbox">
                                    <input asp-for="RememberMe" />
                                    <label class="" asp-for="RememberMe"></label>
                                    <span class="forgot-password">
                                        <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
                                    </span>
                                </div>
                            </div>
                        </div>
                            @if (Model.DisplayCaptcha)
    {
                        <div class="captcha-box">
                            <nop-captcha />
                        </div>
}
                        </div>
                    <div class="buttons form-group controls">
                        <div class="col-md-3">
                            @*<input class="button-1 login-button" type="submit" value="@T("Account.Login.LoginButton")" />*@
                            <button class="button-1 login-button button button-3d button-rounded button-darkgreen" type="submit"><i class="icon-line2-login"></i>@T("Account.Login.LoginButton")</button>
                        </div>
                        </div>
</form>
            </div>
        </div>
            </div>
            <div class="external-authentication col-sm-12 col-md-12">
                @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
            </div>
            @*@await Component.InvokeAsync("TopicBlock", new { systemName = "LoginRegistrationInfo" })*@
        </div>
</div>