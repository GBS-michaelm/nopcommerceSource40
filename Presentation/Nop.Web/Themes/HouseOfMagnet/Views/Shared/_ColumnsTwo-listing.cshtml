@using Nop.Core.Plugins
@using Nop.Core.Infrastructure
@using Nop.Services.Configuration
@using Nop.Plugin.Catalog.GBS
@using Nop.Plugin.Catalog.GBS.Controllers
@using Nop.Services.Stores
@using Nop.Core
@{
    var _storeContext = EngineContext.Current.Resolve<IStoreContext>();
    var categoryNavigationSettings = EngineContext.Current.Resolve<ISettingService>().LoadSetting<CategoryNavigationSettings>(_storeContext.CurrentStore.Id);
}
@{
    Layout = "_Root";
}
@{
    //current category ID
    int currentCategoryId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.RequestContext.RouteData.Values["categoryId"].ToString());
    }

    //current manufacturer ID
    int currentManufacturerId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.RequestContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    int currentProductId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.RequestContext.RouteData.Values["productId"].ToString());
    }
}
@if (IsSectionDefined("Breadcrumb"))
{
    @section Breadcrumb {
        @RenderSection("Breadcrumb")
    }
}

@if (Model.DisplayCategoryBreadcrumb)
{
    <div class="breadcrumb-wrapper">
        <ul class="breadcrumb">
            <li>
                <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")"><i class="fa fa-home"></i></a>
                @*<span class="delimiter">@breadcrumbDelimiter</span> </li>*@
                @foreach (var cat in Model.CategoryBreadcrumb)
                {
                    var isLastCategory = cat.Id == Model.Id;
                <li>
                    @if (isLastCategory)
                    {
                        <strong class="current-item active">@cat.Name</strong>
                    }
                    else
                    {
                        <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
                        @*<span class="delimiter">@breadcrumbDelimiter</span>*@
                    }
                </li>
                }
            </ul>
        </div>
}

<div class="page-title panel-heading categorytitle">
    <h1>@Model.Name</h1>
</div>
@if (!String.IsNullOrWhiteSpace(Model.Description))
        {
            <p class="list-content">
                @Html.Raw(Model.Description)
            </p>
        }
@*<div class="category-section">
    <div class="row">
        @*<div class="col-sm-6">
<img alt="@Model.PictureModel.AlternateText" src="@Model.PictureModel.ImageUrl" title="@Model.PictureModel.Title" width="569" height="374" />
</div>*@
        @*<div class="col-sm-6">
        <div class="row">
            <div class="col-sm-6 small-category"><img src="/Themes/HouseOfMagnet/Content/images/categoryimg1.jpg" width="269" height="173" alt="" /></div>
            <div class="col-sm-6 small-category"><img src="/Themes/HouseOfMagnet/Content/images/categoryimg2.jpg" width="269" height="173" alt="" /></div>
            <div class="col-sm-6"><img src="/Themes/HouseOfMagnet/Content/images/categoryimg3.jpg" width="269" height="173" alt="" /></div>
            <div class="col-sm-6"><img src="/Themes/HouseOfMagnet/Content/images/categoryimg4.jpg" width="269" height="173" alt="" /></div>
        </div>
    </div>*@
    @*</div>*@
@*</div>*@
        <div id="gateway-sales-banner"> @await Component.InvokeAsync("TopicBlock", "Topic", new { systemName = "hom_gateway_sale_banner" })</div>
<div class="listing-page">
    <div class="sidebar col-md-3">
        <div class=" sidebar-title">
            <h3>Refine Your Choices</h3>
            <a href="#">Clear</a>
        </div>
        @if (IsSectionDefined("left"))
        {
            @RenderSection("left")
        }
        else
        {
            @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_before" })
            if (categoryNavigationSettings.IsActive)
            {
                @await Component.InvokeAsync("Widget", new { widgetZone = "category_navigation_block", additionalData = currentCategoryId + ", additionalData =" + currentProductId })
            }
            else
            {
                @await Component.InvokeAsync("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
            }
            @*@await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_category_navigation" })
            @await Component.InvokeAsync("ManufacturerNavigation", "Catalog", new { currentManufacturerId = currentManufacturerId })
            @await Component.InvokeAsync("VendorNavigation", "Catalog")*@
            @*@await Component.InvokeAsync("PopularProductTags", "Catalog")*@
            @*@await Component.InvokeAsync("RecentlyViewedProductsBlock", "Product", new { productThumbPictureSize = 64 })*@
            @await Component.InvokeAsync("PollBlock", "Poll", new { systemKeyword = "LeftColumnPoll" })
            @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after" })
        }
    </div>
    <div class="side-content col-md-9">
        @await Component.InvokeAsync("Widget", new { widgetZone = "main_column_before" })
        @RenderBody()
        @await Component.InvokeAsync("Widget", new { widgetZone = "main_column_after" })
    </div>
</div>
