@using Nop.Core.Plugins
@using Nop.Core.Infrastructure
@using Nop.Services.Configuration
@using Nop.Plugin.Catalog.GBS
@using Nop.Plugin.Catalog.GBS.Controllers
@using Nop.Services.Stores
@using Nop.Core
@{
    PluginDescriptor requestQuotePlugin = EngineContext.Current.Resolve<IPluginFinder>().GetPluginDescriptorBySystemName("Catalog.GBS");
    bool IsRequestQuotePluginInstalled = requestQuotePlugin != null && requestQuotePlugin.Installed;

    var _storeService = EngineContext.Current.Resolve<IStoreService>();
    var _workContext = EngineContext.Current.Resolve<IWorkContext>();
    var storeScope = EngineContext.Current.Resolve<WidgetsCategoryNavigationController>().GetActiveStoreScopeConfiguration(_storeService, _workContext);
    var categoryNavigationSettings = EngineContext.Current.Resolve<ISettingService>().LoadSetting<CategoryNavigationSettings>(storeScope);
}
@{
    Layout = "~/Views/Shared/_Root.cshtml";
}
@{
    //current category ID
    int currentCategoryId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.RequestContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    int currentManufacturerId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.RequestContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    int currentProductId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.RequestContext.RouteData.Values["productId"].ToString());
    }
}
@if (IsSectionDefined("Breadcrumb"))
{
    @section Breadcrumb {
        @RenderSection("Breadcrumb")
    }
}
    <div class="sidebar col-md-3">
        @if (IsSectionDefined("left"))
        {
            @RenderSection("left")
        }
        else
        {
            @Html.Widget("left_side_column_before")
            if (categoryNavigationSettings.IsActive)
            {
                @Html.Widget("category_navigation_block", currentCategoryId + "," + currentProductId)
            }
            else
            {
                @Html.Action("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
            }
            @Html.Widget("left_side_column_after_category_navigation")
            @Html.Action("ManufacturerNavigation", "Catalog", new { currentManufacturerId = currentManufacturerId })
            @Html.Action("VendorNavigation", "Catalog")
            @*@Html.Action("PopularProductTags", "Catalog")*@
            @Html.Action("RecentlyViewedProductsBlock", "Product", new { productThumbPictureSize = 64 })
            @Html.Action("PollBlock", "Poll", new { systemKeyword = "LeftColumnPoll" })
            @Html.Widget("left_side_column_after")
        }
    </div>
    <div class="side-content col-md-9">
        @Html.Widget("main_column_before")
        @RenderBody()
        @Html.Widget("main_column_after")
    </div>
