@using System.Data.Entity;
@using Nop.Plugin.DataAccess.GBS;
@using Nop.Core;
@using Nop.Core.Domain.Catalog;
@using Nop.Core.Infrastructure;
@using Nop.Web.Framework.Themes;
@using System.Data;
@using System.Text;
@using Nop.Services.Catalog;
@using Nop.Plugin.BusinessLogic.GBS.Domain;
@using System.Collections.Specialized;
@using Nop.Plugin.BusinessLogic.GBS;
@using Nop.Services.Configuration;
@using Nop.Services.Logging;

@{
    Layout = "~/Views/Shared/_Root.cshtml";
}
@{

    //current category ID
    //int currentCategoryId = 0;
    //if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
    //    Url.RequestContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    //{
    //    currentCategoryId = Convert.ToInt32(Url.RequestContext.RouteData.Values["categoryId"].ToString());
    //}

    ////current manufacturer ID
    //int currentManufacturerId = 0;
    //if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
    //    Url.RequestContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    //{
    //    currentManufacturerId = Convert.ToInt32(Url.RequestContext.RouteData.Values["manufacturerId"].ToString());
    //}

    ////current product ID
    //int currentProductId = 0;
    //if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
    //    Url.RequestContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    //{
    //    currentProductId = Convert.ToInt32(Url.RequestContext.RouteData.Values["productId"].ToString());
    //}
}

@{

    var _settingService = EngineContext.Current.Resolve<ISettingService>();
    var _specificationAttributeService = EngineContext.Current.Resolve<ISpecificationAttributeService>();
    var _storeContext = EngineContext.Current.Resolve<IStoreContext>();
    ILogger logger = EngineContext.Current.Resolve<ILogger>();
    string marketCenterDefaultID = _settingService.GetSettingByKey<string>("GBSBusinessLogicSettings.MarketCenterDefaultId", storeId: _storeContext.CurrentStore.Id);

    int id = @Model.Id;
    string markcenterType = ""; ; //get query string from url
                                  //string marketcenterOverride = ""; // over ride h1 h2 etc for page
}

@{
    NameValueCollection nvc = Request.QueryString;
    if (nvc.HasKeys())
    {
        for (int i = 0; i < nvc.Count; i++)
        {
            string key = nvc.GetKey(i);

            if (key == "mctype")
            {
                markcenterType = nvc.Get(i);
            }
        }
    }
}

@{
    //chart to load
    string chart = "";

    //*** set data to hold which chart will load depending on parent category ***


    //if (@Model.Name.Contains("Specialty"))
    //{
    //    chart = "hom_specialty_magnets_product_options_chart";
    //}

}

@{

    MarketCenter marketCenter = null;
    string specOptionId = "";

    try
    {
        
        if (id != Int32.Parse(marketCenterDefaultID))
        {
            
            //using a different mc type
            Dictionary<string, Object> paramDicEx = new Dictionary<string, Object>();
            paramDicEx.Add("@categoryId", id);

            DBManager manager = new DBManager();
            string select = "EXEC usp_SelectGBSCategorySpecAttributesOptionMapping @categoryId";
            DataView result = manager.GetParameterizedDataView(select, paramDicEx);

            if (result.Count > 0)
            {
                DataTable specAttrOptTable = result.ToTable(true, "SpecificationAttributeOptionId");

                var specOptIds = specAttrOptTable.AsEnumerable().Select(r => r.Field<int>("SpecificationAttributeOptionId")).ToArray();
                IList<SpecificationAttributeOption> specOptions = _specificationAttributeService.GetSpecificationAttributeOptionsByIds(specOptIds);

                string whatAmIRef = _settingService.GetSettingByKey<string>("GBSBusinessLogicSettings.MarketCenterWhatAmIReferenceName", storeId: _storeContext.CurrentStore.Id);

                specOptionId = specOptions.Where(x => x.SpecificationAttribute.Name == whatAmIRef).FirstOrDefault().Id.ToString();

            }

            if (!string.IsNullOrEmpty(specOptionId))
            {
                //if attr is found assign mc to this cat id
                marketCenter = MarketCenter.GetMarketCenter(id, lightVer: false);
                markcenterType = specOptionId;
            }
            else
            {
                //fall back on default
                marketCenter = MarketCenter.GetMarketCenter(Int32.Parse(marketCenterDefaultID), lightVer: false);
            }

        }
        else
        {
            marketCenter = MarketCenter.GetMarketCenter(id, lightVer: false);
        }
    }
    catch (Exception ex)
    {
        logger.Error("_ColumnsTwo-marketcenter-gateway.cshtml Checking for spec attr option. Market Center Id : " + id + " Spec Attr Option : " + specOptionId, ex);
    }


    string h1 = marketCenter.h1;
    string h2 = marketCenter.h2;
    string topText = marketCenter.topText;
    string bottomText = marketCenter.bottomText;
    string backgroundColor = marketCenter.backgroundColor;
    string foregroundImage = marketCenter.foregroundImage;
    string backgroundImage = marketCenter.backgroundImage;


}

@if (IsSectionDefined("Breadcrumb"))
{
    @section Breadcrumb {
        @RenderSection("Breadcrumb")
    }
}

@*@if (Model.DisplayCategoryBreadcrumb)
{*@
    @*<div id="gatewayBreadcrumb" class="breadcrumb-wrapper">
        <ul class="breadcrumb">
            <li>
                <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")"><i class="fa fa-home"></i></a>*@
                @*<span class="delimiter">@breadcrumbDelimiter</span> </li>*@
                @*@foreach (var cat in Model.CategoryBreadcrumb)
                {
                    var isLastCategory = cat.Id == @id;
                <li>
                    @if (isLastCategory)
                    {
                        <strong class="current-item active">@cat.Name</strong>
                    }
                    else
                    {
                        <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
                        @*<span class="delimiter">@breadcrumbDelimiter</span>*@
                    @*}
                </li>
            }*@
            @*</ul>
        </div>*@
    @*//}*@

<div id="gatewayPageTitle" class="page-title panel-heading gateway-title">
    <h1 id="gatewayH1" class="gateway-h1">@h1</h1>
    <div class="gateway-h2-wrap">
        <p class="gateway-h2"><span>@h2</span></p>
    </div>
</div>

<div>@*salewidgethere*@</div>
<div id="gateway-body" class="bgstretchouter" style="background-color : @backgroundColor; background-image: url(@backgroundImage);">
    <div id="gateway-body-inner" class="bgstretchinner">
        <input id="cssChange" type="hidden" value="" />

        <p id="gatewayTopText">
            @topText
        </p>

        <div id="gateway-innner">
            <div id="gatewayLayersContainer">
                <div id="gatewayWYSIWYG" class="sports-wysiwyg">
                    @Html.Action("MarketCenterGatewayTabs", "GatewayPage", new { marketCenterId = marketCenterDefaultID, type = markcenterType })
                </div>

                <img id="gatewayForegroundImage" class="" src="@foregroundImage" />

            </div>
        </div>
        <p id="gatewayBottomText">
            @bottomText
        </p>
    </div>
</div>

<script>

    $(document).ready(function () {

        var obj = jQuery.parseJSON('{ "outer": ".bgstretchouter" , "inner": ".bgstretchinner" }');
        CustomResize();

        function CustomResize() {
            $(window).resize(obj, function () {

                var $c = $('.container'),
                    $w = $(obj.outer),
                    totalWidth = $('.footer').outerWidth(),
                    wellWidth = $c.outerWidth(),
                    diff = totalWidth - wellWidth,
                    marg = -Math.floor(diff / 2) + 'px';

                console.log("footer width: " + $('.footer').outerWidth());
                console.log("container width: " + $c.outerWidth());
                console.log("");

                $w.each(function () {
                    $(this).css({
                        'margin-left': marg,
                        'margin-right': marg
                    });
                })

                $(obj.inner).width($(".container").width());

            });

            $(window).resize();
        }

    });

</script>


@{
    //Loading extra topics

    if (!string.IsNullOrEmpty(@chart))
    {
        <div id="chartWrap">
            <div id="chartSection">
                @Html.Action("TopicBlock", "Topic", new { systemName = @chart.ToString() })
            </div>
        </div>
    }

    @*<div id="videoAndQuantityCalculatorWrap">
            <div id="innerVidAndWQtyCalc">
                @Html.Action("TopicBlock", "Topic", new { systemName = "hom_video_quantity_chart" })
            </div>
        </div>*@

    @*<div>
            @Html.Action("TopicBlock", "Topic", new { systemName = "hom_calendar_reorder_steps" })
        </div>

        <div>
            @Html.Action("TopicBlock", "Topic", new { systemName = "hom_product_features_notepads" })
        </div>

        <div>
            @Html.Action("TopicBlock", "Topic", new { systemName = "hom_testimonials" })
        </div>
        <div>
            @Html.Action("TopicBlock", "Topic", new { systemName = "hom_accessories_specialty_magnets" })
        </div>
        <div>
            @Html.Action("TopicBlock", "Topic", new { systemName = "hom_opc_video" })
        </div>*@


}




@*<div class="category-section">
        <div class="row">
            @*<div class="col-sm-6">
    <img alt="@Model.PictureModel.AlternateText" src="@Model.PictureModel.ImageUrl" title="@Model.PictureModel.Title" width="569" height="374" />
    </div>*@
@*<div class="col-sm-6">
        <div class="row">
            <div class="col-sm-6 small-category"><img src="/Themes/SimplexTheme/Content/images/categoryimg1.jpg" width="269" height="173" alt="" /></div>
            <div class="col-sm-6 small-category"><img src="/Themes/SimplexTheme/Content/images/categoryimg2.jpg" width="269" height="173" alt="" /></div>
            <div class="col-sm-6"><img src="/Themes/SimplexTheme/Content/images/categoryimg3.jpg" width="269" height="173" alt="" /></div>
            <div class="col-sm-6"><img src="/Themes/SimplexTheme/Content/images/categoryimg4.jpg" width="269" height="173" alt="" /></div>
        </div>
    </div>*@
@*</div>*@
@*</div>*@

@*<div class="listing-page">
    <div class="sidebar col-md-3">
        <div class=" sidebar-title">
            <h3>Refine Your Choices</h3>
            <a href="#">Clear</a>
        </div>
        @if (IsSectionDefined("left"))
        {
            @RenderSection("left")
        }
        else
        {
            @Html.Widget("left_side_column_before")
            @Html.Action("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })*@

@*@Html.Widget("left_side_column_after_category_navigation")
    @Html.Action("ManufacturerNavigation", "Catalog", new { currentManufacturerId = currentManufacturerId })
    @Html.Action("VendorNavigation", "Catalog")*@
@*@Html.Action("PopularProductTags", "Catalog")*@
@*@Html.Action("RecentlyViewedProductsBlock", "Product", new { productThumbPictureSize = 64 })*@
@*@Html.Action("PollBlock", "Poll", new { systemKeyword = "LeftColumnPoll" })
            @Html.Widget("left_side_column_after")
        }
    </div>*@
<div class="side-content col-md-9">
    @*@Html.Widget("main_column_before")*@
    @RenderBody()
    @*@Html.Widget("main_column_after")*@
</div>
@*</div>*@







@*function LoadTeamCategoryProducts(id) {

        var link = "sportsgateway/GatewayCatalogProducts/sportsTeam/" + id;
        //console.log(id)

        $.ajax({
            type: "GET",
            url: link,
            cache: false,
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            dataType: "json",
            success: function (msg) {
                console.log("success");
                console.log(msg);
                console.log(msg.message);

                $("#gatewayWYSIWYG").html(msg);
                $("#gatewayWYSIWYG").show();
                //$("#gatewayTopText").html(msg.h1);


            },
            error: function (msg) {
                console.log("error");
                console.log(msg);
                console.log(msg.d);
            },
            complete: function (data) {

            },

        });
    }*@