@using Nop.Web.Infrastructure;
@using Nop.Core;
@using Nop.Core.Domain.Catalog;
@using Nop.Core.Infrastructure;
@using Nop.Web.Framework.Themes;
@using System.Data;
@using System.Text;
@using Nop.Services.Catalog;
@using Nop.Services.Seo;
@using Nop.Core.Domain.Seo;
@using Nop.Web.Infrastructure.MarketCenter;
@using Nop.Web.Infrastructure;

@{
	var themeName = EngineContext.Current.Resolve<IThemeContext>().WorkingThemeName;


	Layout = "_Root";
	Html.AppendCssFileParts(string.Format("~/Themes/{0}/Content/css/parent-company-gateway.css", themeName));
}
@{
	//current category ID
	var currentCategoryId = 0;
	if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
		Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
	{
		currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
	}


	//current manufacturer ID
	var currentManufacturerId = 0;
	if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
		Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
	{
		currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
	}


	//current product ID
	var currentProductId = 0;
	if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
		Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
	{
		currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
	}
}
@if (IsSectionDefined("Breadcrumb"))
{
	@section Breadcrumb {
		@RenderSection("Breadcrumb")
	}
}

@{
	int id = @Model.Id;
}

@{

	DBManager manager = new DBManager();

	//Dictionary<string, string> categoryDic = new Dictionary<string, string>();
	//categoryDic.Add("@CategoryId", id);

	//string categoryDataQuery = "EXEC usp_SelectGBSCustomCategoryData @CategoryId";
	//DataView categoryDataView = manager.GetParameterizedDataView(categoryDataQuery, categoryDic);

	//if(categoryDataView.Count > 0)
	//{
	//    categoryName = categoryDataView[0]["H1"].ToString();

	//}

	CompanyWeb company = new CompanyWeb(id);
	string categoryName = company.h1;
	string categoryh2 = company.h2;
	string fontColor = company.foregroundColor;
	string aboutYourMarketCenter = company.aboutYourMarketCenter;

}


@if (Model.DisplayCategoryBreadcrumb)
{
	<div class="breadcrumb-wrapper">
		<ul class="breadcrumb">
			<li>
				<a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")"><i class="fa fa-home"></i></a>
				@*<span class="delimiter">@breadcrumbDelimiter</span> </li>*@
				@foreach (var cat in Model.CategoryBreadcrumb)
				{
					var isLastCategory = cat.Id == Model.Id;
				<li>
					@if (isLastCategory)
					{
						<strong class="current-item active">@cat.Name</strong>
					}
					else
					{
						<a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
						@*<span class="delimiter">@breadcrumbDelimiter</span>*@
					}
				</li>
			}
			</ul>
		</div>
	}





<div id="parentTitleWrapDiv">

	<div id="leftTitleWrap" class="page-title panel-heading categorytitle parent-gateway-name" style="border-left-color: @fontColor !important;">
		<h2 style="color : @fontColor;"><b>@categoryName</b></h2>
	</div>



	@if (!String.IsNullOrWhiteSpace(Model.Description))
	{
		<div class="parent-gateway-description">
			@*<p class="list-content">*@
			<h3>@categoryh2</h3>@Html.Raw(Model.Description)
			@*</p>*@
		</div>
	}

</div>





@*<div class="category-section">
		<div class="row">
			@*<div class="col-sm-6">
	<img alt="@Model.PictureModel.AlternateText" src="@Model.PictureModel.ImageUrl" title="@Model.PictureModel.Title" width="569" height="374" />
	</div>*@
@*<div class="col-sm-6">
		<div class="row">
			<div class="col-sm-6 small-category"><img src="/Themes/HouseOfMagnet/Content/images/categoryimg1.jpg" width="269" height="173" alt="" /></div>
			<div class="col-sm-6 small-category"><img src="/Themes/HouseOfMagnet/Content/images/categoryimg2.jpg" width="269" height="173" alt="" /></div>
			<div class="col-sm-6"><img src="/Themes/HouseOfMagnet/Content/images/categoryimg3.jpg" width="269" height="173" alt="" /></div>
			<div class="col-sm-6"><img src="/Themes/HouseOfMagnet/Content/images/categoryimg4.jpg" width="269" height="173" alt="" /></div>
		</div>
	</div>*@
@*</div>*@
@*</div>*@

<div id="searchArea">
	<div id="searchAreaLeft">
		<p>Find Your Office: </p>

		@{
			StringBuilder sb = new StringBuilder();

			//category stuff
			var catService = EngineContext.Current.Resolve<ICategoryService>();
			//IPagedList<Category> marketCenterByNameList = catService.GetAllCategories("Market Center");
			//for testing
			//int catCount = marketCenterByNameList.Count();
			//int storeId = marketCenterByNameList[0].Id;
			//IList<Category> allMarketCenters = catService.GetAllCategoriesByParentCategoryId(storeId);

			//IList<Category> allMarketCenters = catService.GetAllCategoriesByParentCategoryId(Model.Id);

			//var companiesInOrder = allMarketCenters.OrderBy(x => x.Name).ToList();

			//foreach (var item in companiesInOrder)
			//{
			//    sb.Append("<option value='" + item.GetSeName() + "'>" + item.Name + "</option>"); //"+ item. +"
			//}

			//stored proc way
			//Dictionary<string, Object> childCategoryDic = new Dictionary<string, Object>();
			//childCategoryDic.Add("@CategoryId", id);
			//string childCategoryDataQuery = "EXEC usp_SelectGBSChildCategoryData @CategoryId";
			//DataView childCategoryDataView = manager.GetParameterizedDataView(childCategoryDataQuery, childCategoryDic);

			//if (childCategoryDataView.Count > 0)
			//{
			//    for (int i = 0; i < childCategoryDataView.Count; i++)
			//    {
			//        sb.Append("<option value='" + childCategoryDataView[i]["slug"].ToString() + "'> " + childCategoryDataView[i]["name"].ToString() + "</option>");
			//    }

			//}

			//class attribute way
			List<Category> childCategoriesList = new List<Category>();
			for (int i = 0; i < company.childCompanyIds.Count; i++)
			{
				Category childCompany = catService.GetCategoryById(company.childCompanyIds[i]);
				childCategoriesList.Add(childCompany);
			}

			var companiesInOrder = childCategoriesList.OrderBy(x => x.Name).ToList();
			foreach (var item in companiesInOrder)
			{
				sb.Append("<option value='" + item.GetSeName() + "'>" + item.Name + "</option>"); //"+ item. +"
			}

			string allString = sb.ToString();

		}

		<select id="marketCenterDropDown" class="form-control dropdown-filter" onchange="location = this.value">
			<option value="">Select Office</option>
			@Html.Raw(@allString)
		</select>

	</div>

	<div id="searchAreaRight">
		<p><b>Can't find your office?</b></p>
		<p>Use the templates below or <a id="requestTemplatesLink">request templates</a> for your office.</p>
	</div>
</div>

<div class="listing-page">
	<div id="leftColumn" class="sidebar col-md-3">
		<div class="sidebar-title">
			@*<h3>Refine Your Choices</h3>
				<a href="#">Clear</a>*@
		</div>

		<div id="workPlace">
			@await Component.InvokeAsync("TopicBlock", new { systemName = "hom_marketcenter_work_place" })
		</div>
		<div id="agentPacks">
			@await Component.InvokeAsync("TopicBlock", new { systemName = "hom_marketcenter_agent_packs_column" })
		</div>
		<div id="marketCenterAbout">
			@*@await Component.InvokeAsync("TopicBlock", "Topic", new { systemName = "hom_marketcenter_yourcenter_about" })*@
			<h3>About Your Market Center</h3>
			@aboutYourMarketCenter
		</div>

		@*Stuff on the left*@

		@*@if (IsSectionDefined("left"))
			{
				@RenderSection("left")
			}
			else
			{
				@await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_before" })
				@await Component.InvokeAsync("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })*@

		@*@await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_category_navigation" })
			@await Component.InvokeAsync("ManufacturerNavigation", "Catalog", new { currentManufacturerId = currentManufacturerId })
			@await Component.InvokeAsync("VendorNavigation", "Catalog")*@
		@*@await Component.InvokeAsync("PopularProductTags", "Catalog")*@
		@*@await Component.InvokeAsync("RecentlyViewedProductsBlock", "Product", new { productThumbPictureSize = 64 })*@
		@*@await Component.InvokeAsync("PollBlock", "Poll", new { systemKeyword = "LeftColumnPoll" })
				@await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after" })
			}*@
	</div>
	<div id="rightColumn" class="side-content col-md-9">
		@*<div class="right-column-title">

			</div>*@



		@await Component.InvokeAsync("Widget", new { widgetZone = "main_column_before" })
		@RenderBody()
		@await Component.InvokeAsync("Widget", new { widgetZone = "main_column_after" })


		@*Stuff on the Right*@

	</div>

	<script type="text/javascript">
		$(document).ready(function () {
			//$(".topic-html-content").addClass("topic-html-content-parent-gateway");

			$("#myWorkPlace").click(SetAsMyWorkPlace);

			var length = $('#marketCenterDropDown > option').length;
			console.log("length: " + length);
			if (length <= 1) {
				$("#searchAreaLeft").hide();
			}

			if ($(".parent-gateway-name").height() > $(".parent-gateway-description").height()) {
				$(".parent-gateway-description").height($(".parent-gateway-name").height());
			} else {
				$(".parent-gateway-name").height($(".parent-gateway-description").height());
			}


		});



		function SetAsMyWorkPlace() {
			//some db update ajax?

			$("#myWorkPlace").html("<i class='fa fa-check'></i> I Work Here");

		}


	</script>






</div>
