@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Core.Infrastructure
@using Nop.Web.Models.Catalog;
@using System.Text;
@using Nop.Plugin.Checkout.GBS;
@using Nop.Services.Catalog;
@using Nop.Services.Orders;
@using Nop.Core.Domain.Catalog;
@{
    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;

    //setting for amalgamation
    Model.ProductPrice.ForceRedirectionAfterAddingToCart = false;
    Model.ProductPrice.DisableBuyButton = false;

    //if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    //{
    //    addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    //}
    //else
    //{
    //addtocartlink = Url.RouteUrl("GBSAddProductToCart-Amalgamation", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    //}

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    //get current cart
    //if item already in cart, get items quantity, change css, 
    IWorkContext workContext = EngineContext.Current.Resolve<IWorkContext>();
    IShoppingCartService shoppingCartService = EngineContext.Current.Resolve<IShoppingCartService>();
    ICollection<ShoppingCartItem> shoppingCart = workContext.CurrentCustomer.ShoppingCartItems;
    IProductService productService = EngineContext.Current.Resolve<IProductService>();



    var amalgamationID = 00;

    IList<Product> associatedProductList = productService.GetAssociatedProducts(Model.Id);
    if(associatedProductList.Count > 0)
    {
        ISpecificationAttributeService specService = EngineContext.Current.Resolve<ISpecificationAttributeService>();

        foreach (var groupedproduct in associatedProductList)
        {
            string type = "";

            var specAttrs = specService.GetProductSpecificationAttributes(groupedproduct.Id);

            //IList<ProductSpecificationAttribute> list = specService.GetProductSpecificationAttributes(productId);

            foreach (var spec in specAttrs)
            {
                if (spec.SpecificationAttributeOption.SpecificationAttribute.Name == "Pack Type")
                {
                    type = spec.SpecificationAttributeOption.Name;

                    if(type == "Carton")
                    {
                        amalgamationID = groupedproduct.Id;
                        break;
                    }else
                    {
                        break;
                    }

                }

            }
        }
    }
    else{
        amalgamationID = Model.Id;
    }

    Product product = productService.GetProductById(amalgamationID);

    ShoppingCartItem item = shoppingCartService.FindShoppingCartItemInTheCart(shoppingCart.ToList(), ShoppingCartType.ShoppingCart, product);
    bool inCart = false;
    var dropdownId = "dropdown-qty-" + amalgamationID;

    StringBuilder sb = new StringBuilder();
    if (item != null)
    {
        sb.Append("<select id='" + dropdownId + "' class='amalgamation-dropdown dropdown in-cart' data-productid='" + amalgamationID + "'>");
        sb.Append("<option value='0'>Quantity</option>");
        inCart = true;
    }
    else
    {
        sb.Append("<select id='" + dropdownId + "' class='amalgamation-dropdown dropdown' data-productid='" + amalgamationID + "'>");
        sb.Append("<option selected='selected' value='0'>Quantity</option>");
    }

    for (int i = 1; i < 101; i++)
    {
        if(inCart && item.Quantity == i)
        {
            sb.Append("<option selected='selected' value='" + i + "'>" + i + "</option>");
        }else
        {
            sb.Append("<option value='" + i + "'>" + i + "</option>");
        }

    }
    sb.Append("</select>");
}

<div class="product-item clearfix" data-productid="@amalgamationID">
    @Html.Widget("product_listing_widget", Model.Id)
    <div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
        @*<div class="wishlist-compare-wrapper">
            @if (!Model.ProductPrice.DisableWishlistButton)
            {
                <input type="button" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
            }
            @if (!Model.ProductPrice.DisableAddToCompareListButton)
            {
                <input type="button" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
            }
        </div>*@
    </div>
    <div class="caption">
        <div class="details">
            <h3 class="product-title">
                <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a>
            </h3>
 	    @Html.Widget("product_artist_name", Model.Id)            
            <div class="prices">
                @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                {
                    <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                }
                <span class="price actual-price">@Model.ProductPrice.Price</span>
                @if (Model.ProductPrice.DisplayTaxShippingInfo)
                {
                    var inclTax = EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <span class="tax-shipping-info">
                        @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </span>
                }
                @if (!String.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                {
                    <div class="base-price-pangv">
                        @Model.ProductPrice.BasePricePAngV
                    </div>
                }
            </div>
            @if (Model.ReviewOverviewModel.AllowCustomerReviews)
            {
                int ratingPercent = 0;
                if (Model.ReviewOverviewModel.TotalReviews != 0)
                {
                    ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                }
                <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    @if (!Model.ProductPrice.DisableWishlistButton)
                    {
                        <input type="button" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                    }
                    <div class="rating">
                        <div style="width: @(ratingPercent)%">
                        </div>
                    </div>
                </div>
            }
            <p class="description">
                @Html.Raw(Model.ShortDescription)
            </p>
            <div class="add-info">
		        @*@Html.Widget("productbox_addinfo_before", Model.Id)  
                @Html.Widget("productbox_addinfo_middle", Model.Id)*@
                <div class="amalgamation-buttons">
                    <div class="amalgamation-buttons-details">
                        <input type="button" value="@T("Products.Details")" class="btn btn-primary product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
                    </div>
                    

                    @if (!Model.ProductPrice.DisableBuyButton)
                    {
                        var addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.ProductPrice.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.ProductPrice.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                        var buttonId = "amalgamationButton" + @amalgamationID;

                        <div class="amalgamation-dropdown-cart-wrap">
                            <div class="qty-wrap">
                               @Html.Raw(sb.ToString())
                            </div>
                            <div class="amalgamation-add-to-cart">
                          
                                    @{                                            

                                        if (inCart)
                                        {
                                            <div id="@buttonId" class="amalgamation-button-in-cart">
                                                <i class="amalgamation-check fa fa-check"></i><input id="@amalgamationID" type="button"  data-cart-type="@shoppingCartTypeId" value="In Cart" class="btn btn-primary amalgamation-product-box-add-to-cart-button in-cart amalgamation-bar-handler" data-cartlink=""  />   @*onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;"*@
                                            </div>
                                        }
                                        else
                                        {
                                            <div id="@buttonId" class="amalgamation-button">
                                                <i class="amalgamation-check"></i><input id="@amalgamationID" type="button" data-cart-type="@shoppingCartTypeId" value="@(addToCartText)" class="btn  amalgamation-product-box-add-to-cart-button amalgamation-bar-handler" data-cartlink="" /> @*onclick=""*@
                                            </div>
                                        }
                                    }

                                            </div>
                            @*<a onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" class="button button-3d button-rounded button-darkgreen"><i class="icon-search"></i>@(addToCartText)</a>*@
                        </div>
                    }	
                </div>
                @*@Html.Widget("productbox_addinfo_after", Model.Id)*@
            </div>
        </div>
    </div>


    @*<script type="text/javascript">
        $(document).ready(function () {

            $(".amalgamation-dropdown").unbind().change(function () {

                var productId = $(this).data('prodid');
                var cartType = $("#" + productId).data('cart-type');
                var qty = $(this).val();
                var obj = jQuery.parseJSON('{ "productId": "' + productId + '","cartType": "' + cartType + '" , "quantity": "' + qty + '" }');
                    
                var dropdown = $(this);
                var addToCartButton = $("#" + productId);
                var buttonStyling = $('#amalgmationButton' + productId);

                //change button text to update unless they dont have an in cart class tag then leave as add to cart
                if (dropdown.hasClass('in-cart')) {
                                                                           
                    dropdown.removeClass('in-cart');

                    addToCartButton.removeClass('in-cart');
                    addToCartButton.addClass('readyforcart');
                    addToCartButton.val('Update'); //button text
                    
                    buttonStyling.addClass('amalgmation-button');
                    buttonStyling.removeClass('amalgmation-button-in-cart');
                    buttonStyling.css('opacity', 1);
                    buttonStyling.find('i').removeClass('fa fa-check');
                    
                }

                if (!dropdown.hasClass('in-cart')) {

                    addToCartButton.addClass('readyforcart');

                    buttonStyling.css('opacity', 1);

                }
                
                CreateCartLink(obj);
                              
                                               
            });

            $(".amalgamtion-product-box-add-to-cart-button").unbind().click(function () {

                var addToCartButton = $(this);
                //ignore button clicks on items already in cart that havent had their quantities changed
                if (!addToCartButton.hasClass('in-cart') && addToCartButton.hasClass('readyforcart')) {                   
                    AmalgamationAddToCart(addToCartButton);                  
                }
                
            });
       
        });

        //call to change cart link when a quantity is changed
        function CreateCartLink(obj) {
            var link = "addproducttocart/amalgamation/" + obj.productId + "/" + obj.cartType + "/" + obj.quantity + "";
            //var finalLink = "AjaxCart.addproducttocart_catalog('" + link + "'); return false";

            //var finalLink = link;


            
            $("#" + obj.productId).attr('data-cartlink', link);

            $("#" + obj.productId).data('cartlink', link);

            //console.log("finallink: " + link);
            //console.log("link custom attr" + $("#" + obj.productId).data('cartlink'));


        }

        //function UpdateCartLink(obj) {
        //    //modify cart
            

            
        //}

        function AmalgamationAddToCart(addToCartButton) {
            
            var dropdown = $("#dropdown-qty-" + addToCartButton.attr('id'));
            var buttonStyling = $('#amalgmationButton' + addToCartButton.attr('id'));
            var link = addToCartButton.data('cartlink');

            //console.log("addtocartlink : " + link);


            $.ajax({
                type: "POST",
                url: link,
                cache: false,
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                dataType: "json",
                success: function (msg) {
                    console.log("success");
                    console.log(msg); //entire object
                    console.log(msg.qty);

                    if (msg.qty == 0) {
                        //set text To Add To Cart change styling to orange style and opacity
                        dropdown.removeClass('in-cart');

                        addToCartButton.val("Add To Cart");
                        addToCartButton.removeClass('readyforcart');

                        buttonStyling.addClass('amalgmation-button');
                        buttonStyling.removeClass('amalgmation-button-in-cart');
                        buttonStyling.css('opacity', 0.3);
                        buttonStyling.find('i').removeClass('fa fa-check');

                    } else {
                        //Set Text to In Cart and set to green stlying                       
                        dropdown.addClass('in-cart');

                        addToCartButton.val("In Cart");
                        addToCartButton.removeClass('readyforcart');

                        buttonStyling.addClass('amalgmation-button-in-cart');
                        buttonStyling.removeClass('amalgmation-button');                        
                        buttonStyling.find('i').addClass('fa fa-check');

                    }

                },
                error: function (msg) {
                    console.log("error");
                    console.log(msg);
                    console.log(msg.d);
                },
                complete: function (data) {

                },

            });

        }

    </script>*@


</div>


