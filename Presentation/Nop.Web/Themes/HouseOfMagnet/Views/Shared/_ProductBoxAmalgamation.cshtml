@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Core.Infrastructure
@using Nop.Web.Models.Catalog;
@using System.Text;
@using Nop.Plugin.Checkout.GBS;
@using Nop.Services.Catalog;
@using Nop.Services.Orders;
@using Nop.Core.Domain.Catalog;
@{
    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    var _productService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<IProductService>();
    var _specificationAttributeService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<ISpecificationAttributeService>();
}
    //setting for amalgamation
    Model.ProductPrice.ForceRedirectionAfterAddingToCart = false;
    Model.ProductPrice.DisableBuyButton = false;

    //if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    //{
    //    addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    //}
    //else
    //{
    //addtocartlink = Url.RouteUrl("GBSAddProductToCart-Amalgamation", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    //}

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    //get current cart
    //if item already in cart, get items quantity, change css, 
    IWorkContext workContext = EngineContext.Current.Resolve<IWorkContext>();
    IShoppingCartService shoppingCartService = EngineContext.Current.Resolve<IShoppingCartService>();
    ICollection<ShoppingCartItem> shoppingCart = workContext.CurrentCustomer.ShoppingCartItems;
    IProductService productService = EngineContext.Current.Resolve<IProductService>();

    var featuredId = Model.CustomProperties["featuredProductId"];
    var masterCategoryId = Model.CustomProperties["masterCategoryId"];
    var textBoxId = Model.CustomProperties["textBoxId"];
    var buttonId = Model.CustomProperties["ButtonId"];
    int amalgamationID = (int)buttonId;

    //Products are grouped, the carton product must be found 
    //IList<Product> associatedProductList = productService.GetAssociatedProducts(Model.Id);
    //if (associatedProductList.Count > 0)
    //{
    //    ISpecificationAttributeService specService = EngineContext.Current.Resolve<ISpecificationAttributeService>();

    //    foreach (var groupedproduct in associatedProductList)
    //    {
    //        string type = "";

    //        var specAttrs = specService.GetProductSpecificationAttributes(groupedproduct.Id);

    //        //IList<ProductSpecificationAttribute> list = specService.GetProductSpecificationAttributes(productId);

    //        foreach (var spec in specAttrs)
    //        {
    //            if (spec.SpecificationAttributeOption.SpecificationAttribute.Name == "Pack Type")
    //            {
    //                type = spec.SpecificationAttributeOption.Name;

    //                if (type == "Carton")
    //                {
    //                    amalgamationID = groupedproduct.Id;
    //                    Model.CustomProperties.Add("ButtonId", amalgamationID);
    //                    break;
    //                }
    //                else
    //                {
    //                    break;
    //                }

    //            }

    //        }
    //    }
    //}
    //else
    //{
    //    amalgamationID = Model.Id;
    //}

    var EnteredQuantity = buttonId;

    Product product = productService.GetProductById(amalgamationID);

    ShoppingCartItem cartitem = shoppingCartService.FindShoppingCartItemInTheCart(shoppingCart.ToList(), ShoppingCartType.ShoppingCart, product);
    bool inCart = false;
    //var dropdownId = "dropdown-qty-" + amalgamationID;

    //StringBuilder sb = new StringBuilder();
    if (cartitem != null)
    {
        //    sb.Append("<select id='" + dropdownId + "' class='amalgamation-dropdown dropdown in-cart' data-productid='" + amalgamationID + "'>");
        //    sb.Append("<option value='0'>Quantity</option>");
        inCart = true;
    }
    //else
    //{
    //    sb.Append("<select id='" + dropdownId + "' class='amalgamation-dropdown dropdown' data-productid='" + amalgamationID + "'>");
    //    sb.Append("<option selected='selected' value='0'>Quantity</option>");
    //}

    //for (int i = 1; i < 101; i++)
    //{
    //    if(inCart && item.Quantity == i)
    //    {
    //        sb.Append("<option selected='selected' value='" + i + "'>" + i + "</option>");
    //    }else
    //    {
    //        sb.Append("<option value='" + i + "'>" + i + "</option>");
    //    }

    //}
    //sb.Append("</select>");
}

<div class="product-item clearfix" data-productid="@amalgamationID">
    @Html.Widget("product_listing_widget", amalgamationID)
    <div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
        @*<div class="wishlist-compare-wrapper">
            @if (!Model.ProductPrice.DisableWishlistButton)
            {
                <input type="button" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
            }
            @if (!Model.ProductPrice.DisableAddToCompareListButton)
            {
                <input type="button" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
            }
        </div>*@
    </div>
    <div class="caption amal-group">
        <div class="details">
            <h3 class="product-title">
                <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a>
            </h3>
 	    @Html.Widget("product_artist_name", amalgamationID)            
            <div class="prices">
                @{
                    var result = _specificationAttributeService.GetProductSpecificationAttributes(Model.Id).Where(x =>
                    (x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "product price display"
                    || x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "pack type"
                    || x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each quantity"
                    || x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each unit"
                    ));
                }
                @if (result.Count() == 4 )
                {
                    var packType = _specificationAttributeService.GetProductSpecificationAttributes(Model.Id).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "pack type").FirstOrDefault().SpecificationAttributeOption.Name;
                    var eachUnit = _specificationAttributeService.GetProductSpecificationAttributes(Model.Id).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each unit").FirstOrDefault().SpecificationAttributeOption.Name;
                    var eachQuantity = _specificationAttributeService.GetProductSpecificationAttributes(Model.Id).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each quantity").FirstOrDefault().SpecificationAttributeOption.Name;
                    var displayTemplate = _specificationAttributeService.GetProductSpecificationAttributes(Model.Id).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "product price display").FirstOrDefault().SpecificationAttributeOption.Name; ;

                    var displayPriceString = displayTemplate.Replace("[price]", Math.Round(Model.ProductPrice.PriceValue, 2).ToString());
                    displayPriceString = displayPriceString.Replace("[oldprice]", Model.ProductPrice.OldPrice);
                    displayPriceString = displayPriceString.Replace("[eachunit]", eachUnit);
                    displayPriceString = displayPriceString.Replace("[eachqty]", eachQuantity);
                    displayPriceString = displayPriceString.Replace("[packtype]", packType);
                    if (_productService.GetProductById(Model.Id).TierPrices.Count() > 0)
                    {
                        var tier1price = _productService.GetProductById(Model.Id).TierPrices.Count() > 0 ? _productService.GetProductById(Model.Id).TierPrices.First().Price : Model.ProductPrice.PriceValue;
                        var tier1Qty = _productService.GetProductById(Model.Id).TierPrices.Count() > 0 ? _productService.GetProductById(Model.Id).TierPrices.First().Quantity : int.Parse(eachQuantity);
                        var tier2price = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? _productService.GetProductById(Model.Id).TierPrices.ElementAt(1).Price : 0;
                        var tier2Qty = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? _productService.GetProductById(Model.Id).TierPrices.ElementAt(1).Quantity : 0;
                        var tier3price = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? _productService.GetProductById(Model.Id).TierPrices.ElementAt(2).Price : 0;
                        var tier3Qty = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? _productService.GetProductById(Model.Id).TierPrices.ElementAt(2).Quantity : 0;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 0 ? displayPriceString.Replace("[pricetier1qty]", tier1Qty.ToString()) : "";
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier1qtyXeachqty]", (tier1Qty * Int32.Parse(eachQuantity)).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 0 ? displayPriceString.Replace("[pricetier1amt]", Math.Round(tier1price, 2).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 0 ? displayPriceString.Replace("[pricetier1amt/eachqty]", Math.Round(tier1price / Int32.Parse(eachQuantity), 2).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier2qty]", tier2Qty.ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier2qtyXeachqty]", (tier2Qty * Int32.Parse(eachQuantity)).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier2amt]", Math.Round(tier2price, 2).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier2amt/eachqty]", Math.Round(tier2price / Int32.Parse(eachQuantity), 2).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier3qty]", tier3Qty.ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier3qtyXeachqty]", (tier3Qty * Int32.Parse(eachQuantity)).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier3amt]", Math.Round(tier3price, 2).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier3amt/eachqty]", Math.Round(tier3price / Int32.Parse(eachQuantity), 2).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier1amtXpricetier1qty]", Math.Round(tier1price * tier1Qty, 2).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier2amtXpricetier2qty]", Math.Round(tier2price * tier2Qty, 2).ToString()) : displayPriceString;
                        displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier3amtXpricetier3qty]", Math.Round(tier3price * tier3Qty, 2).ToString()) : displayPriceString;
                    }else if(displayTemplate.Contains("pricetier"))
                    {
                        displayPriceString = "$"+ Math.Round(Model.ProductPrice.PriceValue/ Int32.Parse(eachQuantity), 2).ToString() +" ea";
                    }
                    <span class="actual-price">@displayPriceString</span>
                }
                else
                {
                    if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                    }
                    <span class="price actual-price">@Model.ProductPrice.Price</span>
                }
                @if (Model.ProductPrice.DisplayTaxShippingInfo)
                {
                    var inclTax = EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <span class="tax-shipping-info">
                        @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </span>
                }
                @if (!String.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                {
                    <div class="base-price-pangv">
                        @Model.ProductPrice.BasePricePAngV
                    </div>
                }
            </div>
            @if (Model.ReviewOverviewModel.AllowCustomerReviews)
            {
                int ratingPercent = 0;
                if (Model.ReviewOverviewModel.TotalReviews != 0)
                {
                    ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                }
                <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    @if (!Model.ProductPrice.DisableWishlistButton)
                    {
                        <input type="button" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                    }
                    <div class="rating">
                        <div style="width: @(ratingPercent)%">
                        </div>
                    </div>
                </div>
            }
            <p class="description">
                @Html.Raw(Model.ShortDescription)
            </p>
            <div class="add-info">
		        @*@Html.Widget("productbox_addinfo_before", Model.Id)  
                @Html.Widget("productbox_addinfo_middle", Model.Id)*@
                <div class="amalgamation-buttons">
                    <div class="amalgamation-buttons-details">
                        <input type="button" value="@T("Products.Details")" class="btn btn-primary product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
                    </div>


                    @if (!Model.ProductPrice.DisableBuyButton)
                    {
                        var addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.ProductPrice.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.ProductPrice.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }

                        buttonId = "amalgamationButton" + @amalgamationID;

                        //<div class="amalgamation-dropdown-cart-wrap">
                        //@*<div class="qty-wrap">
                        //   @Html.Raw(sb.ToString())

                        //</div>*@
                        <div class="add-to-cart amal-group">
                            <div class="add-to-cart-panel">
                                <div class="quantity-box">
                                    <div class="enter-quantity">
                                        Enter Quantity:
                                        @*@Html.LabelFor(model => model.EnteredQuantity, new { @class = "qty-label" }, ":")*@
                                    </div>
                                    @*@if (Model.AllowedQuantities.Count > 0)
                                        {
                                            @Html.DropDownListFor(model => model.EnteredQuantity, Model.AllowedQuantities, new { @class = "qty-dropdown form-control" })
                                        }*@
                                    @*else

                                        {*@
                                    <div class="addtocart-quantity-box amal-qty-box">
                                        @*@Html.TextBoxFor(model => model.EnteredQuantity, new { @class = "qty-input form-control", @onkeyup = "ChangeQuantity1(this)", @data_productid = Model.ProductId })*@
                                        @{
                                            var empty = 0;

                                            if (cartitem != null)
                                            {
                                                @Html.TextBoxFor(model => @EnteredQuantity, new { @class = " qty-input amalgamation-qty-input form-control amalgamation-textbox in-cart group-amalgamation-textbox amal-group", @data_productid = amalgamationID, @data_initqty = @cartitem.Quantity, data_featuredproductid = @featuredId, data_master_category_id = @masterCategoryId, data_cart_qty = "" })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => @EnteredQuantity, new { @class = " qty-input amalgamation-qty-input form-control  amalgamation-textbox group-amalgamation-textbox amal-group", @data_productid = amalgamationID, @data_initqty = 0, data_featuredproductid = @featuredId, data_master_category_id = @masterCategoryId, data_cart_qty = "" })
                                            }
                                        }

                                        @*<span class="increase-quantity" data-productid="@amalgamationID" data-featuredproductid="@featuredId" onclick="AmalIncreaseTextBoxQuantity(@Html.FieldIdFor(model => @EnteredQuantity ));"><i class="fa fa-plus" aria-hidden="true"></i></span>*@
                                        @*<span class="decrease-quantity" data-productid="@amalgamationID" data-featuredproductid="@featuredId" onclick="AmalDecreaseTextBoxQuantity(@Html.FieldIdFor(model => @EnteredQuantity));"><i class="fa fa-minus" aria-hidden="true"></i></span>*@

                                        <span class="increase-quantity amal-group" data-productid="@amalgamationID" data-featuredproductid="@featuredId" data-textboxid=""><i class="fa fa-plus" aria-hidden="true"></i></span>
                                        <span class="decrease-quantity amal-group" data-productid="@amalgamationID" data-featuredproductid="@featuredId" data-textboxid="@textBoxId"><i class="fa fa-minus" aria-hidden="true"></i></span>
                                    </div>
                                    @*//when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)*@
                                    <script type="text/javascript">
                                        $(document).ready(function () {
                                            $("#@Html.FieldIdFor(model => amalgamationID)").keydown(function (event) {
                                                if (event.keyCode == 13) {
                                                    //$("#add-to-cart-button-@Model.Id").click();
                                                    //$("#add-to-cart-button-@Model.Id").click();
                                                    return false;
                                                }
                                            });
                                        });
                                    </script>
                                    @*}*@
                                </div>
                            </div>
                            @*</div>*@
                            <div class="amalgamation-add-to-cart amal-group">

                                @{

                                    if (inCart)
                                    {
                                        <div id="@buttonId" class="amalgamation-button-in-cart">
                                            <input id="@amalgamationID" type="button" data-cart-type="@shoppingCartTypeId" value="In Cart" class="button amalgamation-btn amalgamation-btn-incart amalgamation-product-box-add-to-cart-button in-cart amalgamation-bar-handler" data-cartlink="" />   @*onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;"*@
                                        </div>
                                    }
                                    else
                                    {
                                        <div id="@buttonId" class="amalgamation-button">
                                            <input id="@amalgamationID" type="button" data-cart-type="@shoppingCartTypeId" value="@(addToCartText)" class="button amalgamation-btn amalgamation-product-box-add-to-cart-button amalgamation-bar-handler" data-cartlink="" /> @*onclick=""*@
                                        </div>
                                    }
                                }

                            </div>
                            @*<a onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" class="button button-3d button-rounded button-darkgreen"><i class="icon-search"></i>@(addToCartText)</a>*@
                            @*</div>*@
                        </div>
                                    }
                </div>
                @*@Html.Widget("productbox_addinfo_after", Model.Id)*@
            </div>
        </div>
    </div>
    <script type="text/javascript">

    $(document).ready(function () {

        var done = false;
        var everythingLoaded = setInterval(function () {
            if (/loaded|complete/.test(document.readyState) && !done) {
                clearInterval(everythingLoaded);
                $(".amalgamation-qty-input").each(function (index) {

                    AmalgamationChangeQuantity(this);

                });
                //  ChangeQuantity1($(".qty-input")); // this is the function that gets called when everything is loaded
                done = true;
            }
        }, 100);

    });


    </script>

    @*<script type="text/javascript">
        $(document).ready(function () {

            $(".amalgamation-dropdown").unbind().change(function () {

                var productId = $(this).data('prodid');
                var cartType = $("#" + productId).data('cart-type');
                var qty = $(this).val();
                var obj = jQuery.parseJSON('{ "productId": "' + productId + '","cartType": "' + cartType + '" , "quantity": "' + qty + '" }');

                var dropdown = $(this);
                var addToCartButton = $("#" + productId);
                var buttonStyling = $('#amalgmationButton' + productId);

                //change button text to update unless they dont have an in cart class tag then leave as add to cart
                if (dropdown.hasClass('in-cart')) {

                    dropdown.removeClass('in-cart');

                    addToCartButton.removeClass('in-cart');
                    addToCartButton.addClass('readyforcart');
                    addToCartButton.val('Update'); //button text

                    buttonStyling.addClass('amalgmation-button');
                    buttonStyling.removeClass('amalgmation-button-in-cart');
                    buttonStyling.css('opacity', 1);
                    buttonStyling.find('i').removeClass('fa fa-check');

                }

                if (!dropdown.hasClass('in-cart')) {

                    addToCartButton.addClass('readyforcart');

                    buttonStyling.css('opacity', 1);

                }

                CreateCartLink(obj);


            });

            $(".amalgamtion-product-box-add-to-cart-button").unbind().click(function () {

                var addToCartButton = $(this);
                //ignore button clicks on items already in cart that havent had their quantities changed
                if (!addToCartButton.hasClass('in-cart') && addToCartButton.hasClass('readyforcart')) {
                    AmalgamationAddToCart(addToCartButton);
                }

            });

        });

        //call to change cart link when a quantity is changed
        function CreateCartLink(obj) {
            var link = "addproducttocart/amalgamation/" + obj.productId + "/" + obj.cartType + "/" + obj.quantity + "";
            //var finalLink = "AjaxCart.addproducttocart_catalog('" + link + "'); return false";

            //var finalLink = link;



            $("#" + obj.productId).attr('data-cartlink', link);

            $("#" + obj.productId).data('cartlink', link);

            //console.log("finallink: " + link);
            //console.log("link custom attr" + $("#" + obj.productId).data('cartlink'));


        }

        //function UpdateCartLink(obj) {
        //    //modify cart



        //}

        function AmalgamationAddToCart(addToCartButton) {

            var dropdown = $("#dropdown-qty-" + addToCartButton.attr('id'));
            var buttonStyling = $('#amalgmationButton' + addToCartButton.attr('id'));
            var link = addToCartButton.data('cartlink');

            //console.log("addtocartlink : " + link);


            $.ajax({
                type: "POST",
                url: link,
                cache: false,
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                dataType: "json",
                success: function (msg) {
                    console.log("success");
                    console.log(msg); //entire object
                    console.log(msg.qty);

                    if (msg.qty == 0) {
                        //set text To Add To Cart change styling to orange style and opacity
                        dropdown.removeClass('in-cart');

                        addToCartButton.val("Add To Cart");
                        addToCartButton.removeClass('readyforcart');

                        buttonStyling.addClass('amalgmation-button');
                        buttonStyling.removeClass('amalgmation-button-in-cart');
                        buttonStyling.css('opacity', 0.3);
                        buttonStyling.find('i').removeClass('fa fa-check');

                    } else {
                        //Set Text to In Cart and set to green stlying
                        dropdown.addClass('in-cart');

                        addToCartButton.val("In Cart");
                        addToCartButton.removeClass('readyforcart');

                        buttonStyling.addClass('amalgmation-button-in-cart');
                        buttonStyling.removeClass('amalgmation-button');
                        buttonStyling.find('i').addClass('fa fa-check');

                    }

                },
                error: function (msg) {
                    console.log("error");
                    console.log(msg);
                    console.log(msg.d);
                },
                complete: function (data) {

                },

            });

        }

    </script>*@


</div>


