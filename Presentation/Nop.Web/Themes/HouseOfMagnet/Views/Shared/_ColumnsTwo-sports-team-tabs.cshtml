@using System.Data.Entity;
@using Nop.Web.Infrastructure;
@using Nop.Core;
@using Nop.Core.Domain.Catalog;
@using Nop.Core.Infrastructure;
@using Nop.Web.Framework.Themes;
@using System.Data;
@using System.Text;
@using Nop.Services.Catalog;
@using Nop.Plugin.BusinessLogic.GBS.Domain;

@{
    Layout = "_Root";
}
@{

//current category ID
//int currentCategoryId = 0;
//if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
//    Url.RequestContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
//{
//    currentCategoryId = Convert.ToInt32(Url.RequestContext.RouteData.Values["categoryId"].ToString());
//}

////current manufacturer ID
//int currentManufacturerId = 0;
//if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
//    Url.RequestContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
//{
//    currentManufacturerId = Convert.ToInt32(Url.RequestContext.RouteData.Values["manufacturerId"].ToString());
//}

////current product ID
//int currentProductId = 0;
//if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
//    Url.RequestContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
//{
//    currentProductId = Convert.ToInt32(Url.RequestContext.RouteData.Values["productId"].ToString());
//}
}

@{
    int id = @Model.Id;
}

@{ 
    //chart to load
    string chart = "";

    //*** set data to hold which chart will load depending on parent category *** 


    if (@Model.Name.Contains("Specialty"))
    {
        chart = "hom_specialty_magnets_product_options_chart";
    }

}

@{

    //DBManager manager = new DBManager();
    //var themeName = EngineContext.Current.Resolve<IThemeContext>().WorkingThemeName;

    //Dictionary<string, string> categoryIdDic = new Dictionary<string, string>();
    //categoryIdDic.Add("@CategoryId", id);

    //string selectSpecAttrAndCategoryDataView = "EXEC usp_SelectGBSCustomCategoryAndSpecAttributesData @CategoryId";
    //DataView specAttrAndCategoryDataView = manager.GetParameterizedDataView(selectSpecAttrAndCategoryDataView, categoryIdDic);
    //DataView categoryDataView = null;

    //string h1 = Model.Name;
    //string h2 = "";
    //string topText = "Choose your magnet style to get started...";
    //string backgroundImage = "";
    //string foregroundImage = "";
    //string bottomText = "Can't decide? Let us help you...";
    //string backgroundColor = "";
    //bool hasTeams = false;

    //if (specAttrAndCategoryDataView.Count > 0)
    //{

    //    h1 = !(string.IsNullOrEmpty(specAttrAndCategoryDataView[0]["H1"].ToString())) ? specAttrAndCategoryDataView[0]["H1"].ToString() : Model.Name;
    //    h2 = specAttrAndCategoryDataView[0]["H2"].ToString();
    //    topText = specAttrAndCategoryDataView[0]["UpperText"].ToString();
    //    backgroundImage = specAttrAndCategoryDataView[0]["BackgroundPicturePath"].ToString(); //"/Themes/" + @themeName + "/Content/images/" +  old ver, before full path in db
    //    foregroundImage = specAttrAndCategoryDataView[0]["ForegroundPicturePath"].ToString();
    //    bottomText = specAttrAndCategoryDataView[0]["LowerText"].ToString();
    //    backgroundColor = specAttrAndCategoryDataView[0]["BackgroundColor"].ToString();
    //    hasTeams = true;

    //}
    //else
    //{
    //    string selectCategoryData = "EXEC usp_SelectGBSCustomCategoryData @CategoryId";
    //    categoryDataView = manager.GetParameterizedDataView(selectCategoryData, categoryIdDic);

    //    if (categoryDataView.Count > 0)
    //    {
    //        h1 = !(string.IsNullOrEmpty(categoryDataView[0]["H1"].ToString())) ? categoryDataView[0]["H1"].ToString() : Model.Name;
    //        h2 = categoryDataView[0]["H2"].ToString();
    //        topText = categoryDataView[0]["UpperText"].ToString();
    //        backgroundImage = categoryDataView[0]["BackgroundPicturePath"].ToString(); //Content/images/" + old ver, before full path in db
    //        foregroundImage = categoryDataView[0]["ForegroundPicturePath"].ToString();
    //        bottomText = categoryDataView[0]["LowerText"].ToString();
    //        backgroundColor = categoryDataView[0]["BackgroundColor"].ToString();
    //    }

    //}


    //Load Team Select
    SportsTeam sportsTeam = new SportsTeam(id);
    string h1 = sportsTeam.h1;
    string h2 = sportsTeam.h2;
    string topText = sportsTeam.topText;
    string bottomText = sportsTeam.bottomText;
    string backgroundColor = sportsTeam.backgroundColor;
    string foregroundImage = sportsTeam.foregroundImage;
    string backgroundImage = sportsTeam.backgroundImage;

    StringBuilder teamSectionStringBuilder = new StringBuilder();
    var categoryService = EngineContext.Current.Resolve<ICategoryService>();
    IList<Category> categoryProducts = categoryService.GetAllCategoriesByParentCategoryId(id);
    var teamCategories = categoryProducts.OrderBy(x => x.DisplayOrder).ToList();


    //teamSectionStringBuilder.Append("<main>");

    //for(int i = 0; i < teamCategories.Count; i++)
    //{
    //    if(i == 0)
    //    {
    //        teamSectionStringBuilder.Append("<input id='tab" + (i + 1) + "' type='radio' name='tabs' checked>");
    //    }
    //    else
    //    {
    //        teamSectionStringBuilder.Append("<input id='tab" + (i + 1) + "' type='radio' name='tabs'>");
    //    }

    //    teamSectionStringBuilder.Append("<label id='label" + (i + 1) + "' class='gateway-label' for='tab" + (i + 1) + "'>" + teamCategories[i].Name + "</label>");

    //}
    //for (int i = 0; i < teamCategories.Count; i++)
    //{

    //    IList<Category> teamList = categoryService.GetAllCategoriesByParentCategoryId(teamCategories[i].Id);

    //    List<SportsTeam> teams = sportsTeam.CreateSportsTeamListFromCategories(teamList);

    //    var teamsInOrder = teams.OrderBy(x => x.Name).ToList();

    //    teamSectionStringBuilder.Append("<section id='content" + (i + 1) + "'><p>");
    //    int cur = 1;

    //    foreach (var curTeam in teamsInOrder)
    //    {

    //        //SportsTeam curTeam = new SportsTeam(team.Id);

    //        if (cur % 8 == 0)
    //        {
    //            teamSectionStringBuilder.Append("<p class='inner-team-list'>");
    //        }

    //            teamSectionStringBuilder.Append("<a id='" + curTeam.Id + "' class='team-from-list' href='" + curTeam.SeName + "'>" + curTeam.Name + "</a><br />");

    //        if (cur % 8 == 7)
    //        {
    //            teamSectionStringBuilder.Append("</p>");
    //        }

    //        cur++;

    //    }

    //    teamSectionStringBuilder.Append("</section>");

    //}

    //teamSectionStringBuilder.Append("</main>");

    //string teamHtml = teamSectionStringBuilder.ToString();


    //After Team Is Selected Category Data





    //Handle for team select change



}

@if (IsSectionDefined("Breadcrumb"))
{
    @section Breadcrumb {
        @RenderSection("Breadcrumb")
    }
}

@if (Model.DisplayCategoryBreadcrumb)
{
    <div id="gatewayBreadcrumb" class="breadcrumb-wrapper">
        <ul class="breadcrumb">
            <li>
                <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")"><i class="fa fa-home"></i></a>
                @*<span class="delimiter">@breadcrumbDelimiter</span> </li>*@
                @foreach (var cat in Model.CategoryBreadcrumb)
                {
                    var isLastCategory = cat.Id == Model.Id;
                <li>
                    @if (isLastCategory)
                    {
                        <strong class="current-item active">@cat.Name</strong>
                    }
                    else
                    {
                        <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
                        @*<span class="delimiter">@breadcrumbDelimiter</span>*@
                    }
                </li>
                }
            </ul>
        </div>
}

    <div id="gatewayPageTitle" class="page-title panel-heading gateway-title">
                
        @* h1 from db *@
        <h1 id="gatewayH1" class="gateway-h1">@h1</h1>

        <div class="gateway-h2-wrap">
            @* h2 from db *@
            <p class="gateway-h2"><span >@h2</span></p>
        </div>

    </div>
   


    
    <div id="selectTeamDiv" style="display: none">
        <p id="selectedTeam"></p><a id="changeSelectedTeam">(Change)</a>
    </div>
    
    <div>@*salewidgethere*@</div>
    <div id="gateway-body" style="background-color : @backgroundColor;" class="bottommargin topmargin ">
        <div id="gateway-body-inner" style="background-image: url(@backgroundImage)">
            <input id="cssChange" type="hidden" value="" />
            <input id="originalBodyHeight" type="hidden" value="" />

            @*<div id="gateway-inner">*@
            <div id="topInner">
                <p id="gatewayTopText">
                    @topText
                </p>
            </div>
            <div id="gatewayLayersContainer">
                <div id="teamSelect">
                    <main>

                        @for(int i = 0; i < teamCategories.Count; i++)
                        {
                            if(i == 0)
                            { 
                                <input id='tab@(i + 1)' type='radio' name='tabs' checked>
                            }
                            else
                            {
                                <input id='tab@(i + 1)' type='radio' name='tabs'>
                            }

                        <label id='label@(i + 1)' class='gateway-label' for='tab@(i + 1)'> @teamCategories[i].Name </label>

                        }
                        @for (int j = 0; j < teamCategories.Count; j++)
                        {

                            IList<Category> teamList = categoryService.GetAllCategoriesByParentCategoryId(teamCategories[j].Id);
                            List<SportsTeam> teams = sportsTeam.CreateSportsTeamListFromCategories(teamList);
                            var teamsInOrder = teams.OrderBy(x => x.Name).ToList();
                            int cur = 1;
                                <section id='content@(j + 1)'>
                                    <p>

                                            @foreach (var curTeam in teamsInOrder)
                                            {

                                                //SportsTeam curTeam = new SportsTeam(team.Id);

                                                if (cur % 8 == 0)
                                                {

                                                @:<p class='inner-team-list'>
                                                }

                                                <a id='@curTeam.Id' class='team-from-list' href='@curTeam.SeName'> @curTeam.Name </a><br />

                                                if (cur % 8 == 7)
                                                {
                                                    @:</p>
                                                }

                                                cur++;

                                            }
                                    
                                </section>
                        }
                        
                           @*@await Component.InvokeAsync("SportsTeamsList", "GBSCatalog", new { model = teamCategories, sportsTeamId = Model.Id })*@  
                           @*@await Component.InvokeAsync("SportsTeamsTest", "GBSCatalog")*@     
                        
                    </main>

                </div>
                <div id="sportImage">
                    <img id="gatewayForegroundImage" class="" src="@foregroundImage" />
                </div>
            </div>
            <div id="bottomInnerTabs">
                <p id="gatewayBottomText">
                    @bottomText
                </p>
            </div>

            @*</div>*@

        </div>
    </div>

@{

    @*if (@hasTeams == true)
    {
        //way for js to know gateway is a team page version
        <input id="hasTeam" type="hidden" value="true" />
    }*@



@*var testLink = Url.RouteUrl("GenerateTeamHtml");
<p id="link">@testLink</p>
string link = testLink;*@

}
        <script>
            
            $(document).ready(function () {
                            
                //hide gateway show team box
                //if ($("#hasTeam").val() == "true") {
                //    $("#gatewayWYSIWYG").hide();
                //    $("#teamSelect").show();
                //    $("#label1").click();
                //} else {
                //    $("#teamSelect").remove();
                //}

                $(".team-from-list").click(function () {
                    
                    //console.log($(this).attr('id'));

                    //LoadTeamCategoryProducts($(this).attr('id'));
                    
                   // $("#selectedTeam").html("Team Selected : " + $(this).text() + "  ");

                    
                    //SetTeam($(this).text());

                    //$("#gatewayWYSIWYG").show();
                   // $("#teamSelect").hide(3000, "linear");
                   // $("#selectTeamDiv").show();
                    //$("#gatewayTopText").html(" ");


                    //PageBodyResizeForMultipleProductRows("sports-wysiwyg");

                })

                $("#changeSelectedTeam").click(function () {
                    $("#gatewayWYSIWYG").hide();
                    $("#teamSelect").show();
                    $("#selectTeamDiv").hide();
                    //PageBodyResizeForMultipleProductRows("");
                })

                //$("#cssChange").click(function() {

                //    //console.log("cur h1 test");

                //    var type = $("#gatewayH1").html();

                //    //console.log(type);

                //    switch (type) {
                //        case "Specialty Magnets":
                //            $("#gatewayForegroundImage").addClass("gateway-foreground-specialty");
                //            $("#gatewayWYSIWYG").addClass("regular-wysiwyg");
                //            break;

                            


                //        default:
                //            $("#gatewayForegroundImage").addClass("gateway-foreground-sports");
                //            $("#gatewayWYSIWYG").addClass("sports-wysiwyg");
                //            break;
                //    }
                //});

                function LoadTeamCategoryProducts(id) {

                    var link = "sportsgateway/GatewayCatalogProducts/sportsTeam/" + id;
                    //console.log(id)

                    $.ajax({
                        type: "GET",
                        url: link,             
                        cache: false,
                        contentType: "application/x-www-form-urlencoded; charset=utf-8",
                        dataType: "html",
                        success: function (msg) {
                            console.log("success");                          
                            console.log(msg);
                            console.log(msg.message);
                            
                            

                            $("#gatewayWYSIWYG").html(msg);
                            $("#gatewayWYSIWYG").show();
                            //$("#gatewayTopText").html(msg.h1);


                        },
                        error: function (msg) {
                            console.log("error");
                            console.log(msg);
                            console.log(msg.d);
                        },
                        complete: function (data) {

                        },

                    });
                }


               
                var obj = jQuery.parseJSON('{ "outer": "#videoAndQuantityCalculatorWrap" , "inner": "#innerVidAndWQtyCalc" }');
                CustomResize();
                
                obj = jQuery.parseJSON('{ "outer": "#gateway-body" , "inner": "#gateway-body-inner" }');
                CustomResize();

                function CustomResize() {
                    $(window).resize(obj, function () {
                                                                       
                        var $c = $('.container'),
                            $w = $(obj.outer),
                            totalWidth = $('.footer').outerWidth(),
                            wellWidth = $c.outerWidth(),
                            diff = totalWidth - wellWidth,
                            marg = -Math.floor(diff / 2) + 'px';
                        $w.each(function () {
                            $(this).css({
                                'margin-left': marg,
                                'margin-right': marg
                            });
                        })

                        $(obj.inner).width($(".container").width());

                    });

                    $(window).resize();
                }

                function PageBodyResizeForMultipleProductRows(currentWYSIWYG) {
                    if (currentWYSIWYG != null && currentWYSIWYG != "") {
                        //save original height incase team is changed
                        $("#originalBodyHeight").val($("#gateway-body").height());
                        //change body height for multiple row products
                        var newHeight = parseInt($("." + currentWYSIWYG).height() + 180) + "px";
                        $("#gateway-body").height(newHeight);
                        $("#gateway-inner").height(newHeight);


                        if ($("#gateway-body").height() > 900) {
                            //football foreground image adjust, check if wysiwyg height is greater than a single rows height.
                            $("#gatewayForegroundImage").addClass("gateway-foreground-sports-multirow");
                        }
                        
                    } else {
                        $("#gateway-body").height($("#originalBodyHeight").val());
                        $("#gateway-inner").height($("#originalBodyHeight").val());
                        
                        $("#gatewayForegroundImage").removeClass("gateway-foreground-sports-multirow");
                    }
                    
                }

                //function SetTeam(team) {                   
                //    $(".team-handle").each(function () {
                //        //replace space with dash
                //        var current = $(this).attr("href");
                //        var teamNoSpace = team.replace(/\s+/g, '-');

                //        if(current.indexOf("?") >= 0){
                //            var splitURL = current.split('?');
                //            $(this).attr("href", splitURL[0] + "?team=" + teamNoSpace);
                //            console.log("split ver: " + splitURL[0] + "?team=" + teamNoSpace);

                //        }else{
                //            $(this).attr("href", current + "?team=" + teamNoSpace);
                //            console.log("new ver: " + current + "?team=" + teamNoSpace);
                //        }
                        
                //    })                    
                //}
                
                $("#gateway-inner").height($("#gateway-body").height());
                
                $("#cssChange").click();
                
                //remove topic header
                $("#chartWrap div.panel-heading").remove();
                
                $("#videoAndQuantityCalculatorWrap div.panel-heading").remove();

                function HeightHandle() {
                    
                    console.log("height handle called");

                    var newHeight = parseInt($("#gatewayWYSIWYG").height() + 350) + "px";
                    
                    $("#gateway-body").height(newHeight);
                    $("#gateway-inner").height(newHeight);
                }

                $(window).resize(HeightHandle);



                //992px switches to mobileish screen

            });



        </script>


@{
    //Loading extra topics

    if (!string.IsNullOrEmpty(@chart))
    {
        <div id="chartWrap">
            <div id="chartSection">
                @await Component.InvokeAsync("TopicBlock", "Topic", new { systemName = @chart.ToString() })
            </div>
        </div>
    }

    @*<div id="videoAndQuantityCalculatorWrap">
        <div id="innerVidAndWQtyCalc">
            @await Component.InvokeAsync("TopicBlock", "Topic", new { systemName = "hom_video_quantity_chart" })
        </div>
    </div>*@

    <div>
        @await Component.InvokeAsync("TopicBlock", "Topic", new { systemName = "hom_calendar_reorder_steps" })
    </div>

    <div>
        @await Component.InvokeAsync("TopicBlock", "Topic", new { systemName = "hom_product_features_notepads" })
    </div>

    <div>
        @await Component.InvokeAsync("TopicBlock", "Topic", new { systemName = "hom_testimonials" })
    </div>
    <div>
        @await Component.InvokeAsync("TopicBlock", "Topic", new { systemName = "hom_accessories_specialty_magnets" })
    </div>
    <div>
        @await Component.InvokeAsync("TopicBlock", "Topic", new { systemName = "hom_opc_video" })
    </div>


}



   
@*<div class="category-section">
    <div class="row">
        @*<div class="col-sm-6">
<img alt="@Model.PictureModel.AlternateText" src="@Model.PictureModel.ImageUrl" title="@Model.PictureModel.Title" width="569" height="374" />
</div>*@
        @*<div class="col-sm-6">
            <div class="row">
                <div class="col-sm-6 small-category"><img src="/Themes/SimplexTheme/Content/images/categoryimg1.jpg" width="269" height="173" alt="" /></div>
                <div class="col-sm-6 small-category"><img src="/Themes/SimplexTheme/Content/images/categoryimg2.jpg" width="269" height="173" alt="" /></div>
                <div class="col-sm-6"><img src="/Themes/SimplexTheme/Content/images/categoryimg3.jpg" width="269" height="173" alt="" /></div>
                <div class="col-sm-6"><img src="/Themes/SimplexTheme/Content/images/categoryimg4.jpg" width="269" height="173" alt="" /></div>
            </div>
        </div>*@
    @*</div>*@
@*</div>*@
    
@*<div class="listing-page">
    <div class="sidebar col-md-3">
        <div class=" sidebar-title">
            <h3>Refine Your Choices</h3>
            <a href="#">Clear</a>
        </div>
        @if (IsSectionDefined("left"))
        {
            @RenderSection("left")
        }
        else
        {
            @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_before" })
			@await Component.InvokeAsync("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })*@
            
            @*@await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_category_navigation" })
            @await Component.InvokeAsync("ManufacturerNavigation", "Catalog", new { currentManufacturerId = currentManufacturerId })
            @await Component.InvokeAsync("VendorNavigation", "Catalog")*@
            @*@await Component.InvokeAsync("PopularProductTags", "Catalog")*@
            @*@await Component.InvokeAsync("RecentlyViewedProductsBlock", "Product", new { productThumbPictureSize = 64 })*@
            @*@await Component.InvokeAsync("PollBlock", "Poll", new { systemKeyword = "LeftColumnPoll" })
            @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after" })
        }
    </div>*@
    <div class="side-content col-md-9">
        @*@await Component.InvokeAsync("Widget", new { widgetZone = "main_column_before" })*@
        @RenderBody()
        @*@await Component.InvokeAsync("Widget", new { widgetZone = "main_column_after" })*@
    </div>
@*</div>*@







@*function LoadTeamCategoryProducts(id) {

                    var link = "sportsgateway/GatewayCatalogProducts/sportsTeam/" + id;
                    //console.log(id)

                    $.ajax({
                        type: "GET",
                        url: link,
                        cache: false,
                        contentType: "application/x-www-form-urlencoded; charset=utf-8",
                        dataType: "json",
                        success: function (msg) {
                            console.log("success");
                            console.log(msg);
                            console.log(msg.message);

                            $("#gatewayWYSIWYG").html(msg);
                            $("#gatewayWYSIWYG").show();
                            //$("#gatewayTopText").html(msg.h1);


                        },
                        error: function (msg) {
                            console.log("error");
                            console.log(msg);
                            console.log(msg.d);
                        },
                        complete: function (data) {

                        },

                    });
                }*@
