@model CheckoutPaymentMethodModel
@using Nop.Web.Models.Checkout;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-payment-method-page");
}

<div class="page checkout-page payment-method-page col-sm-9 col-md-9 gbs-margin-bottom-20">
    @await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Payment })
    <div class="payment-method-wrap gbs-checkout-border row gbs-padding-15">
        <div class="payment-address-title">
            <h3>@T("Checkout.PaymentInfo")</h3>
        </div>
        <div class="gbs-padding-15">
            <div class="title small-heading">
                <strong>Payment Method</strong>
            </div>
            @using (Html.BeginRouteForm("CheckoutPaymentMethod", FormMethod.Post))
            {
                if (Model.DisplayRewardPoints && Model.PaymentMethods.Count > 0)
                {
                    <div class="use-reward-points">
                        <label class="checkbox">
                            @Html.EditorFor(model => model.UseRewardPoints)
                            @string.Format(T("Checkout.UseRewardPoints").Text, Model.RewardPointsBalance, Model.RewardPointsAmount)
                        </label>
                    </div>
                }
                if (Model.PaymentMethods.Count > 0)
                {
                    <select id="payment-method-dropdown" name="paymentmethod" class="select-1 form-control">
                        @for (int i = 0; i < Model.PaymentMethods.Count; i++)
                        {
                            var paymentMethod = Model.PaymentMethods[i];
                            var paymentMethodName = paymentMethod.Name;
                            if (!String.IsNullOrEmpty(paymentMethod.Fee))
                            {
                                paymentMethodName = T("Checkout.SelectPaymentMethod.MethodAndFee", paymentMethodName, paymentMethod.Fee).Text;
                            }

                            <option id="paymentmethod_@(i)" value="@(paymentMethod.PaymentMethodSystemName)">@paymentMethodName</option>

                        }
                    </select>
                    <div class="form-group row next-btn-wrapper gbs-margin-top-20">
                        <div class="col-md-12">

                            <button type="submit" name="nextstep" class="button button-rounded button-reveal button-small button-green tright"><i class="icon-line-arrow-right"></i><span>@T("Checkout.NextButton")</span></button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="message-error">
                        @T("Checkout.NoPaymentMethods")
                    </div>
                }
            }


        </div>
    </div>
</div>
<div class="col-sm-3 col-md-3">
    @*@await Component.InvokeAsync("GBSOrderTotals", "GBSShoppingCart", new { isEditable = true })*@
    @await Component.InvokeAsync("GBSOrderTotals", new { additionalData = true })
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("#btn-payment-method").click(function () { PaymentMethodChoose(); });
    });

    function PaymentMethodChoose() {
        var paymentVal = $("#payment-method-dropdown").val();
        setLocation("checkout/selectpaymentmethod?paymentmethod=" + paymentVal);
    }
</script>
