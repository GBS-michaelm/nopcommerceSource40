@model ProductDetailsModel.AddToCartModel
@using Nop.Web.Models.Catalog;
@using Nop.Core.Domain.Orders;
@using Nop.Services.Orders;
@using Nop.Core.Infrastructure;
@using Nop.Services.Catalog;
@using Nop.Core;
@using Nop.Core.Domain.Catalog;
@using System.Text;
@using Nop.Services.Catalog;

@{
    var _specificationAttributeService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<ISpecificationAttributeService>();
    var result = _specificationAttributeService.GetProductSpecificationAttributes(Model.ProductId).Where(x =>
    (x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each quantity"

    ));
    var eachQuantity = 0;
    if (result.Count() == 1)
    {
        eachQuantity = Int32.Parse(_specificationAttributeService.GetProductSpecificationAttributes(Model.ProductId).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each quantity").FirstOrDefault().SpecificationAttributeOption.Name);
    }
    <script>var eachQuantity = @eachQuantity;</script>

}

@if (Model.UpdatedShoppingCartItemId > 0)
{
    @Html.HiddenFor(x => x.UpdatedShoppingCartItemId)   
}

@{ 

    IWorkContext workContext = EngineContext.Current.Resolve<IWorkContext>();
    IShoppingCartService shoppingCartService = EngineContext.Current.Resolve<IShoppingCartService>();
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    ICollection<ShoppingCartItem> shoppingCart = workContext.CurrentCustomer.ShoppingCartItems;
    IProductService productService = EngineContext.Current.Resolve<IProductService>();
    Product product = productService.GetProductById(Model.ProductId);

    bool inCart = false;
    ShoppingCartItem cartitem = shoppingCartService.FindShoppingCartItemInTheCart(shoppingCart.ToList(), ShoppingCartType.ShoppingCart, product);
    if(cartitem != null)
    {
        inCart = true;
    }

    //var dropdownId = "dropdown-qty-" + Model.ProductId;
    //var textboxId = "textbox-qty-" + Model.ProductId;

    var featuredId = Model.CustomProperties["featuredProductId"];
    var masterCategoryId = Model.CustomProperties["masterCategoryId"];
    //var boxid = "textbox-qty-" + Model.ProductId;

    //StringBuilder sb = new StringBuilder();
    //if (inCart)
    //{
    //    sb.Append("<select id='" + dropdownId + "' class='qty- dropdown form-control amalgamation-dropdown in-cart group-amalgamation-dropdown' data-productid='" + Model.ProductId + "' data-initqty='" + cartitem.Quantity + "' data-featuredproductid='" + featuredId + "' data-master-category-id='" + masterCategoryId + "' data-cart-qty=''>");
    //    sb.Append("<option value='0'>Quantity</option>");

    //}
    //else
    //{
    //    sb.Append("<select id='" + dropdownId + "' class='qty- dropdown form-control amalgamation-dropdown group-amalgamation-dropdown' data-productid='" + Model.ProductId + "' data-featuredproductid='" + featuredId + "' data-master-category-id='" + masterCategoryId + "' data-cart-qty=''>");
    //    sb.Append("<option selected='selected' value='0'>Quantity</option>");
    //}

    //for (int i = 1; i < 101; i++)
    //{
    //    if (inCart && cartitem.Quantity == i)
    //    {
    //        sb.Append("<option selected='selected' value='" + i + "'>" + i + "</option>");
    //    }
    //    else
    //    {
    //        sb.Append("<option value='" + i + "'>" + i + "</option>");
    //    }

    //}
    //sb.Append("</select>");

}

@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{
    <div class="add-to-cart">   
	    @if (Model.CustomerEntersPrice)
        {
          <div class="customer-entered-price clearfix">
              <div class="price-input">
                  @Html.LabelFor(model => model.CustomerEnteredPrice, new { @class = "enter-price-label" }, ":")
                  @*round price*@
                  @Html.TextBox("CustomerEnteredPrice", Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice)), new { @class = "enter-price-input form-control" })
              </div>
              <div class="price-range alert alert-info">
                  @Model.CustomerEnteredPriceRange
              </div>
          </div>
    }
    @if (!String.IsNullOrEmpty(Model.MinimumQuantityNotification))
    {
        <div class="min-qty-notification">@Model.MinimumQuantityNotification</div>
    }
    @if (!Model.DisableBuyButton)
    {
        <div class="add-to-cart-panel">
            <div class="quantity-box">
                <div class="enter-quantity">Enter Quantity:
                @*@Html.LabelFor(model => model.EnteredQuantity, new { @class = "qty-label" }, ":")*@
                </div>
                        @if (Model.AllowedQuantities.Count > 0)
                        {
                            @Html.DropDownListFor(model => model.EnteredQuantity, Model.AllowedQuantities, new { @class = "qty-dropdown form-control" })
                        }
                        else

                        {
                            <div class="addtocart-quantity-box amal-qty-box">
                                @*@Html.TextBoxFor(model => model.EnteredQuantity, new { @class = "qty-input form-control", @onkeyup = "ChangeQuantity1(this)", @data_productid = Model.ProductId })*@
                                @{
                                    if (cartitem != null)
                                    {
                                        @Html.TextBoxFor(model => model.EnteredQuantity, new {  @class = " qty-input amalgamation-qty-input form-control amalgamation-textbox in-cart group-amalgamation-textbox", @data_productid = Model.ProductId, @data_initqty = @cartitem.Quantity, data_featuredproductid = @featuredId, data_master_category_id = @masterCategoryId, data_cart_qty = "" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.EnteredQuantity, new { @class = " qty-input amalgamation-qty-input form-control  amalgamation-textbox group-amalgamation-textbox", @data_productid = Model.ProductId, data_featuredproductid = @featuredId, data_master_category_id = @masterCategoryId, data_cart_qty = "" })
                                    }
                                }


                                @*<span class="increase-quantity" data-productid="@Model.ProductId" data-featuredproductid="@featuredId" onclick="AmalIncreaseTextBoxQuantity(@Html.FieldIdFor(model => @boxid));"><i class="fa fa-plus" aria-hidden="true"></i></span>
                                <span class="decrease-quantity" data-productid="@Model.ProductId" data-featuredproductid="@featuredId" onclick="AmalDecreaseTextBoxQuantity(@Html.FieldIdFor(model => @boxid));"><i class="fa fa-minus" aria-hidden="true"></i></span>*@


                                <span class="increase-quantity" data-productid="@Model.ProductId" data-featuredproductid="@featuredId" onclick="AmalIncreaseTextBoxQuantity(@Html.FieldIdFor(model => model.EnteredQuantity));"><i class="fa fa-plus" aria-hidden="true"></i></span>
                                <span class="decrease-quantity" data-productid="@Model.ProductId" data-featuredproductid="@featuredId" onclick="AmalDecreaseTextBoxQuantity(@Html.FieldIdFor(model => model.EnteredQuantity));"><i class="fa fa-minus" aria-hidden="true"></i></span>
                            </div>
                            //when a customer clicks 'Enter' button we submit the "add to cart" button (if visible)
                            <script type="text/javascript">
                                $(document).ready(function () {
                                    $("#@Html.FieldIdFor(model => model.EnteredQuantity)").keydown(function (event) {
                                        if (event.keyCode == 13) {
                                            //$("#add-to-cart-button-@Model.ProductId").click();
                                            //$("#add-to-cart-button-@Model.ProductId").click();
                                            return false;
                                        }
                                    });
                                });
                            </script>
                          }
            </div>
            @{
            var addToCartText = "";
                if (Model.UpdatedShoppingCartItemId > 0 && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
                {
                    addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                }
                else
                {
                    addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                }

                var buttonId = "amalgamationButton" + @Model.ProductId;

                <div class="amalgamation-textbox-cart-wrap">
                   @* <input id="add-to-cart-button-@Model.ProductId"  type="button" class=" btn btn-primary add-to-cart-button" value="@(Model.AvailableForPreOrder ? T("ShoppingCart.PreOrder") : T("ShoppingCart.AddToCart"))" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;" />*@
                     @*<button id="add-to-cart-button-@Model.ProductId" type="submit" class="button button-rounded button-small button-green tright"  data-productid="@Model.ProductId"  data-cartlink=""> @* button-reveal *@
                     @* original on click  below *@
                     @* onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;" *@
                     @*<i class="icon-line-arrow-right"></i>*@
                     @*<span> @(Model.AvailableForPreOrder ? T("ShoppingCart.PreOrder") : T("ShoppingCart.AddToCart"))</span>*@                     
                     @*</button>*@

                    <div class="amalgamation-add-to-cart">
                        @{
                            if (inCart)
                            {
                                <div id="@buttonId" class="amalgamation-button-in-cart">
                                    @*<i class="amalgamation-check fa fa-check"></i>*@<input id="@Model.ProductId" type="button" data-cart-type="@shoppingCartTypeId" value="In Cart" class="button amalgamation-btn amalgamation-btn-incart amalgamation-product-box-add-to-cart-button in-cart amalgamation-bar-handler" data-cartlink="" />   @*onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;"*@
                                </div>
                            }
                            else
                            {
                                <div id="@buttonId" class="amalgamation-button">
                                    @*<i class="amalgamation-check"></i>*@<input id="@Model.ProductId" type="button" data-cart-type="@shoppingCartTypeId" value="@(addToCartText)" class="button amalgamation-btn amalgamation-product-box-add-to-cart-button amalgamation-bar-handler" data-cartlink="" />
                                </div>
                            }
                        }
                    </div>
                    
                    @*<a  data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;" class="button button-3d button-rounded button-green"><i class="icon-shopping-cart"></i>@(Model.AvailableForPreOrder ? T("ShoppingCart.PreOrder") : T("ShoppingCart.AddToCart"))</a>*@
                </div>
            }
	    </div>
    }
    @Html.Widget("productdetails_add_info", Model.ProductId)
</div>
<script type="text/javascript">
    
    $(document).ready(function () {

        var done = false;
        var everythingLoaded = setInterval(function () {
            if (/loaded|complete/.test(document.readyState) && !done) {
                clearInterval(everythingLoaded);
                $(".amalgamation-qty-input").each(function (index) {

                    AmalgamationChangeQuantity(this);

                });
                //  ChangeQuantity1($(".qty-input")); // this is the function that gets called when everything is loaded
                done = true;
            }
        }, 100);
        

        //$('.group-amalgamation-dropdown').each(function (index, value) {

        //    var dropdown = $(this);
        //    if (dropdown.hasClass('in-cart')) {
        //        var curInCart = dropdown.data('initqty');

        //        dropdown.val(curInCart);//.prop('selected', true);
        //    }

        //});

        //$(".group-amalgamation-dropdown").val($(".group-amalgamation-dropdown").data('initqty'));
        //$(".amalgamation-dropdown").trigger("change");

        //will need to change from  on change to on click for add to cart
        //$(".group-amalgamation-dropdown").change(function () {

        //    //console.log("dropdown val: " + $(this).val())
        //    AmalgamationIncreaseQuantity($(this));


        //  });


    });


</script>
}


@*@if (Model.AllowedQuantities.Count > 0)
    {
        <div class="addtocart-quantity-box">
            @{
                if (cartitem != null)
                {
                    @Html.DropDownListFor(model => model.EnteredQuantity, Model.AllowedQuantities, new { @class = "qty- dropdown form-control amalgamation-dropdown in-cart group-amalgamation-dropdown", @data_productid = Model.ProductId, @data_initqty = cartitem.Quantity, })
                }
                else
                {
                    @Html.DropDownListFor(model => model.EnteredQuantity, Model.AllowedQuantities, new { @class = "qty- dropdown form-control amalgamation-dropdown group-amalgamation-dropdown", @data_productid = Model.ProductId })
                }
            }


        </div>
                }*@