@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@using Nop.Web.Framework.Themes
@using Nop.Plugin.DataAccess.GBS;
@using System.Data;
@using Nop.Services.Catalog;
@using Nop.Core.Domain.Catalog;
@using Nop.Web.Factories;

@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");


    Html.AddScriptParts("~/Themes/HouseOfMagnet/Content/js/amalgamation.js");

    var themeName = EngineContext.Current.Resolve<IThemeContext>().WorkingThemeName;
    Html.AppendCssFileParts(string.Format("~/Themes/{0}/Content/css/hom-amalgamation.css", themeName));

    var seoSettings = EngineContext.Current.Resolve<SeoSettings>();

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(productUrl);
    }
    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + Request.Url.AbsoluteUri + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + Request.Url.AbsoluteUri + "\" />");
    }


}
@{
    ICategoryService categoryService = EngineContext.Current.Resolve<ICategoryService>();
    ISpecificationAttributeService specService = EngineContext.Current.Resolve<ISpecificationAttributeService>();
    IProductService productService = EngineContext.Current.Resolve<IProductService>();

    DBManager manager = new DBManager();

    IList<ProductCategory> productCategories = categoryService.GetProductCategoriesByProductId(Model.Id);
    string categoryIds = "";
    for (int i = 0; i < productCategories.Count; i++)
    {
        if (i < productCategories.Count && i != 0)
        {
            categoryIds += "," + productCategories[i].CategoryId.ToString();
        }
        else
        {
            categoryIds += productCategories[i].CategoryId.ToString();
        }
    }
    string amalgamationDataQuery = "EXEC usp_SelectGBSAmalgamationMaster @categoryId";
    Dictionary<string, Object> amalgamationDic = new Dictionary<string, Object>();
    amalgamationDic.Add("@CategoryId", categoryIds);
    DataView amalgamationDataView = manager.GetParameterizedDataView(amalgamationDataQuery, amalgamationDic);
    bool amalgamation = false;
    int amalgamationCategoryId = 00;

    if (amalgamationDataView.Count > 0)
    {
        amalgamationCategoryId = Int32.Parse(amalgamationDataView[0]["masterCategoryId"].ToString());
        amalgamation = true;
    }
    int featuredProductId = 9999;
    string featuredProductDataQuery = "usp_SelectGBSCustomCategoryData @categoryId";
    Dictionary<string, Object> featuredProductDic = new Dictionary<string, Object>();
    featuredProductDic.Add("@CategoryId", amalgamationCategoryId);
    DataView featuredProductDataView = manager.GetParameterizedDataView(featuredProductDataQuery, featuredProductDic);
    Product featuredProduct = null;

    if (featuredProductDataView.Count > 0)
    {
        featuredProductId = Int32.Parse(featuredProductDataView[0]["FeaturedProductId"].ToString());
        featuredProduct = productService.GetProductById(featuredProductId); //allow access to products tier price chart    
    }


}


<!--product breadcrumb-->
@Html.Partial("_ProductBreadcrumb", Model.Breadcrumb)
@Html.Widget("productdetails_after_breadcrumb", Model.Id)
<div class="page product-details-page grouped">
    <div class="page-body">
        @Html.Widget("productdetails_top", Model.Id)
        @using (Html.BeginRouteForm("Product", new { SeName = Model.SeName }, FormMethod.Post, new { id = "product-details-form" }))
        {
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential">
                    @Html.Partial("_Discontinued", Model)
                    <div class="product-name panel-heading">
                        <h1 itemprop="name">
                            @Model.Name
                            @Html.Widget("product_artist_name", Model.Id)
                        </h1>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            @Html.Widget("productdetails_before_pictures", Model.Id)
                            <!--product pictures-->
                            @Html.Partial("_ProductDetailsPictures", Model)
                            @Html.Widget("productdetails_after_pictures", Model.Id)

                            @Html.Partial("_ProductSpecifications", Model.ProductSpecifications)
                            @Html.Widget("productdetails_bottom", Model.Id)
                            @Html.Widget("productdetails_before_collateral", Model.Id)

                            @if (!String.IsNullOrEmpty(Model.ShortDescription))
                            {
                                <div class="short-description">
                                    @Html.Raw(Model.ShortDescription)
                                </div>
                            }
                            @Html.Raw(Model.FullDescription)


                            @Html.Partial("_ProductTierPrices", Model.TierPrices)  
                           <div class="overview">


                                @Html.Widget("productdetails_overview_top", Model.Id)
                                <!--product reviews-->
                                @Html.Partial("_ProductReviewOverview", Model.ProductReviewOverview)
                                <!--product manufacturers-->
                                @Html.Partial("_ProductManufacturers", Model.ProductManufacturers)
                                <!--compare, email a friend-->
                                <div class="overview-buttons">
                                    @Html.Widget("productdetails_inside_overview_buttons_before", Model.Id)
                                    @Html.Partial("_CompareProductsButton", Model)
                                    @Html.Partial("_ProductEmailAFriendButton", Model)
                                    @Html.Widget("productdetails_inside_overview_buttons_after", Model.Id)
                                </div>
                                <!--price breaks-->
                                @Html.Partial("_ShareButton", Model)
                                @Html.Widget("product_category_titles", Model.Id)
                                @Html.Widget("productdetails_overview_bottom", Model.Id)
                            </div>

                        </div>



                        <div class="col-md-6">

                            <div class="product-collateral">
                                <!--associated products-->
                                <div class="product-variant-list">
                                    @foreach (var variant in Model.AssociatedProducts)
                                    {
                                        <div class="product-variant-line group-product-item" data-productid="@variant.Id">
                                            @if (!String.IsNullOrWhiteSpace(variant.Name))
                                            {
                                                <h4 class="variant-name">
                                                    @variant.Name
                                                </h4>
                                            }
                                            <div class="product-variant-wrapper">
                                                @if (!String.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                                                {
                                                    <div class="variant-picture">
                                                        @Html.Widget("product_details_widget", variant.Id)
                                                        @*<img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl"
                                                            title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />*@
                                                    </div>
                                                }
                                                <div class="variant-overview">

                                                    @*@if (!String.IsNullOrWhiteSpace(variant.ShortDescription))
                                                        {
                                                            <div class="variant-description">
                                                                @Html.Raw(variant.ShortDescription)
                                                            </div>
                                                        }*@
                                                    <!--price & add to cart-->
                                                    @{
                                                        var dataDictPrice = new ViewDataDictionary();
                                                        dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", variant.Id);
                                                        @Html.Partial("_ProductPrice", variant.ProductPrice, dataDictPrice)
                                                    }
                                                    <!--gift card-->
                                                    @{
                                                        var dataDictGiftCard = new ViewDataDictionary();
                                                        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", variant.Id);
                                                        @Html.Partial("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                                                    }
                                                    @{
                                                        var dataDictAddToCart = new ViewDataDictionary();
                                                        dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", variant.Id);

                                                        bool amalgamateThis = false;
                                                        

                                                        if (amalgamation)
                                                        {

                                                            //check amalgamation of specific product
                                                            //also check products pack type. For now we assume ONLY CARTON types can be amalgamated

                                                            //check if variant.id has category that is in the same group of the current pages products master category

                                                            string type = "";

                                                            var specAttrs = specService.GetProductSpecificationAttributes(variant.Id);

                                                            //IList<ProductSpecificationAttribute> list = specService.GetProductSpecificationAttributes(productId);

                                                            foreach (var spec in specAttrs)
                                                            {
                                                                if (spec.SpecificationAttributeOption.SpecificationAttribute.Name == "Pack Type")
                                                                {
                                                                    type = spec.SpecificationAttributeOption.Name;

                                                                    if (type == "Carton")
                                                                    {
                                                                        amalgamateThis = true;
                                                                        break;
                                                                    }
                                                                    else
                                                                    {
                                                                        break;
                                                                    }

                                                                }

                                                            }

                                                            if (amalgamateThis)
                                                            {
                                                                variant.AddToCart.CustomProperties.Add("masterCategoryId", amalgamationCategoryId);
                                                                variant.AddToCart.CustomProperties.Add("featuredProductId", featuredProductId);
                                                                
                                                                @Html.Partial("_AmalgamationAddToCart", variant.AddToCart, dataDictAddToCart)
                                                            }

                                                            else
                                                            {

                                                                            @Html.Partial("_AddToCart", variant.AddToCart, dataDictAddToCart)
                                                                        }

                                                                    }
                                                                    else
                                                                    {

                                                                        @Html.Partial("_AddToCart", variant.AddToCart, dataDictAddToCart)
                                                                    }

                                                                }
                                                    <!--rental info-->
                                                    @{
                                                                    var dataDictRental = new ViewDataDictionary();
                                                                    dataDictRental.TemplateInfo.HtmlFieldPrefix = string.Format("rental_{0}", variant.Id);
                                                                    @Html.Partial("_RentalInfo", variant, dataDictRental)
                                                    }
                                                    <!--attributes-->
                                                    @{
                                                                    var dataDictAttributes = new ViewDataDictionary();
                                                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", variant.Id);
                                                                    @Html.Partial("_ProductAttributes", variant.ProductAttributes, dataDictAttributes)
                                                    }

                                                    <div class="form-group overview-buttons">
                                                        <!--wishlist-->
                                                        @{
                                                            var dataDictAddToWishlist = new ViewDataDictionary();
                                                            dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", variant.Id);
                                                            @Html.Partial("_AddToWishlist", variant.AddToCart, dataDictAddToWishlist)
                                                        }
                                                    </div>



                                                    <!--availability-->
                                                    @*@Html.Partial("_Availability", variant)*@
                                                    <!--SKU, MAN, GTIN, vendor-->
                                                    @Html.Partial("_SKU_Man_GTIN_Ven", variant)
                                                    <!--sample download-->
                                                    @Html.Partial("_DownloadSample", variant)





                                                    @if (Model.AssociatedProducts.Count == 0)
                                                    {
                                                        <div class="no-associated-products">
                                                            @T("Products.NoAssociatedProducts")
                                                        </div>
                                                    }
                                                </div>

                                            </div>
                                            <!--delivery-->
                                            @{
                                                if (@featuredProductId != 9999 && amalgamation == true)
                                                {
                                                    @Html.Partial("_FeaturedProductTierPrices", @featuredProduct)
                                                }
                                                else
                                                {
                                                    @Html.Partial("_ProductTierPrices", @variant.TierPrices)
                                                }
                                            }
                                            
                                            @*@Html.Partial("_DeliveryInfo", variant)*@
                                        </div>
                                                            }
                                    @*we do not display "also purchased" for grouped products
                                        @Html.Action("ProductsAlsoPurchased", "Product", new { productId = Model.Id })*@



                                    <div class="product-tags">
                                        <h4>Keywords</h4>
                                        @Html.Partial("_ProductTags", Model.ProductTags)
                                    </div>



                                </div>

                            </div>
                        </div>

                    </div>
                    <div class="product-slider">
                        @Html.Action("RelatedProducts", "Product", new
                   {
                       productId = Model.Id
                   })
                    </div>





                </div>

            </div>
                                                            }
    </div>


    <div id="amalgamationBarSection" style="display: none;">
        @{

            if (amalgamation)
            {

                Category category = categoryService.GetCategoryById(@amalgamationCategoryId);
                ICatalogModelFactory catalogModelFactory = EngineContext.Current.Resolve<ICatalogModelFactory>();
                CatalogPagingFilteringModel catalogPagingFilteringModel = new CatalogPagingFilteringModel();
                catalogPagingFilteringModel.PageSize = 1;
                CategoryModel categoryModel = catalogModelFactory.PrepareCategoryModel(category, catalogPagingFilteringModel);
                categoryModel.CustomProperties.Add("BarType", "Browse");              
                categoryModel.CustomProperties.Add("ParentBrowseURL", categoryModel.SeName);
                
                @Html.Partial("_AmalgamationBar", categoryModel);
            }
        }
    </div>

</div>
