@model IList<ProductDetailsModel.TierPriceModel>
@using Nop.Web.Models.Catalog;
@using Nop.Core.Domain.Orders;
@using Nop.Core.Infrastructure;
@using Nop.Services.Shipping;
@using Nop.Services.Catalog;
@using Nop.Core;
@using Nop.Plugin.Shipping.GBS;
@{
    //When there is just one tier (with  qty 1), there are no actual savings in the list.
    var displayTierPrices = Model.Count > 0 && !(Model.Count == 1 && Model[0].Quantity <= 1);
    var shippingService = EngineContext.Current.Resolve<IShippingService>();
    var productService = EngineContext.Current.Resolve<IProductService>();
    var storeContext = EngineContext.Current.Resolve<IStoreContext>();
    var priceFormatter = EngineContext.Current.Resolve<IPriceFormatter>();
    var shippingSettings = EngineContext.Current.Resolve<GBSShippingSetting>();
    var specificationAttributeService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<ISpecificationAttributeService>();

    ShoppingCartItem si = new ShoppingCartItem();
    si.ProductId = ViewBag.productId;
    int productId = ViewBag.productId;
    si.Product = productService.GetProductById(ViewBag.productId);
    si.StoreId = storeContext.CurrentStore.Id;
    IList<ShoppingCartItem> items = new List<ShoppingCartItem>();
    items.Add(si);
    bool sfml = false;
    Nop.Core.Domain.Common.Address address = new Nop.Core.Domain.Common.Address();
    address.ZipPostalCode = "92020";
    var shippingOptionRequests = shippingService.CreateShippingOptionRequests(items, address, si.StoreId, out sfml);
    var shippingOptionRequest = shippingOptionRequests.FirstOrDefault();
    var shippingMethods = shippingService.LoadActiveShippingRateComputationMethods(null, si.StoreId);
    IList<IShippingRateComputationMethod> gbsShippingMethods = shippingMethods.Where(provider => provider.PluginDescriptor.SystemName == "Nop.Plugin.Shipping.GBS").ToList();
    var gbsShippingMethod = gbsShippingMethods.FirstOrDefault();
    var shippingRate = "";
    if (shippingSettings.UseFlatRate) {
        shippingRate = priceFormatter.FormatPrice((decimal)gbsShippingMethod.GetFixedRate(shippingOptionRequest));
    }else
    {
        var shippingOption = gbsShippingMethod.GetShippingOptions(shippingOptionRequest);
        shippingRate = priceFormatter.FormatPrice(shippingOption.ShippingOptions.FirstOrDefault().Rate);
    }


}
@if (displayTierPrices)
{
    <div class="tier-prices">
        <div class="prices-header">
            <strong>@T("Products.TierPrices")</strong>
        </div>
        <div class="prices-list">
            <div class="panel-default">
                @{
                    var result = specificationAttributeService.GetProductSpecificationAttributes(productId).Where(x =>
                    (x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "product price display"
                    || x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "pack type"
                    || x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each quantity"
                    || x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each unit"
                    ));
                }
                @if (result.Count() == 4)
                {
                    var tier1price = productService.GetProductById(productId).TierPrices.First().Price;
                    var tier1Qty = productService.GetProductById(productId).TierPrices.First().Quantity;
                    var tier2price = productService.GetProductById(productId).TierPrices.ElementAt(1).Price;
                    var tier2Qty = productService.GetProductById(productId).TierPrices.ElementAt(1).Quantity;
                    var tier3price = productService.GetProductById(productId).TierPrices.ElementAt(2).Price;
                    var tier3Qty = productService.GetProductById(productId).TierPrices.ElementAt(2).Quantity;

                    var packType = specificationAttributeService.GetProductSpecificationAttributes(productId).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "pack type").FirstOrDefault().SpecificationAttributeOption.Name;
                    var eachUnit = specificationAttributeService.GetProductSpecificationAttributes(productId).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each unit").FirstOrDefault().SpecificationAttributeOption.Name;
                    var eachQuantity = specificationAttributeService.GetProductSpecificationAttributes(productId).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each quantity").FirstOrDefault().SpecificationAttributeOption.Name;
                    var displayTemplate = specificationAttributeService.GetProductSpecificationAttributes(productId).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "product price display").FirstOrDefault().SpecificationAttributeOption.Name; ;
                    var displayPriceString = displayTemplate.Replace("[pricetier1qty]", (tier1Qty * Int32.Parse(eachQuantity)).ToString());
                    displayPriceString = displayPriceString.Replace("[pricetier1amt]", Math.Round(tier1price, 2).ToString());
                    displayPriceString = displayPriceString.Replace("[pricetier1centamt]", Math.Round(tier1price / Int32.Parse(eachQuantity), 2).ToString().TrimStart('0').TrimStart('.'));
                    displayPriceString = displayPriceString.Replace("[pricetier2qty]", (tier2Qty * Int32.Parse(eachQuantity)).ToString());
                    displayPriceString = displayPriceString.Replace("[pricetier2amt]", Math.Round(tier2price, 2).ToString());
                    displayPriceString = displayPriceString.Replace("[pricetier2centamt]", Math.Round(tier2price / Int32.Parse(eachQuantity), 2).ToString().TrimStart('0').TrimStart('.'));
                    displayPriceString = displayPriceString.Replace("[pricetier2qty]", (tier3Qty * Int32.Parse(eachQuantity)).ToString());
                    displayPriceString = displayPriceString.Replace("[pricetier3amt]", Math.Round(tier3price, 2).ToString());
                    displayPriceString = displayPriceString.Replace("[pricetier3centamt]", Math.Round(tier3price / Int32.Parse(eachQuantity), 2).ToString().TrimStart('0').TrimStart('.'));
                    displayPriceString = displayPriceString.Replace("[eachunit]", eachUnit);
                    <span id="measurementEquation">1 @packType  = @eachQuantity @eachUnit<span>s</span></span>

                }
                <table class="table table-bordered  table-striped">
                    <tr>
                        <td class="field-header span3">
                            @T("Products.TierPrices.Quantity")
                        </td>
                        @foreach (var tierPrice in Model)
                        {
                            <td class="item-quantity span3">
                                @(tierPrice.Quantity)+
                            </td>
                        }
                    </tr>
                    <tr>
                        <td class="field-header span3">
                            @T("Products.TierPrices.Price")
                        </td>
                        @foreach (var tierPrice in Model)
                        {
                            <td class="item-price span3 tier-price-value">
                                @tierPrice.Price
                            </td>
                        }
                    </tr>
                </table>
                @if(!string.IsNullOrEmpty(shippingRate)){ 
                    <div id="disclaimer1">Plus sales tax if shipped to California</div>
                    <div id="disclaimer2">Plus shipping cost of @shippingRate</div>
                }

            </div>  
        </div>
    </div>
}