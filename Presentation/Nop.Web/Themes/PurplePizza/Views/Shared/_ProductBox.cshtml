@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Core.Infrastructure
@using Nop.Web.Models.Catalog;
@using Nop.Services.Catalog;

@{
    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var _productService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<IProductService>();
    var _specificationAttributeService = Nop.Core.Infrastructure.EngineContext.Current.Resolve<ISpecificationAttributeService>();
}
<div class="product-item" data-productid="@Model.Id">
    <div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
    </div>
    <div class="details">
        <h2 class="product-title">
            <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a>
        </h2>
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            int ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                <div class="rating">
                    <div style="width: @(ratingPercent)%">
                    </div>
                </div>
            </div>
        }
        <div class="description">
            @Html.Raw(Model.ShortDescription)
        </div>
        <div class="add-info">
            @Html.Widget("productbox_addinfo_before", Model.Id)
            <div class="prices">
                @{
                    var result = _specificationAttributeService.GetProductSpecificationAttributes(Model.Id).Where(x =>
                    (x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "product price display"
                    || x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "pack type"
                    || x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each quantity"
                    || x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each unit"
                    ));
                }
                @if (result.Count() == 4 && _productService.GetProductById(Model.Id).TierPrices.Count() > 0)
                {
                    var packType = _specificationAttributeService.GetProductSpecificationAttributes(Model.Id).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "pack type").FirstOrDefault().SpecificationAttributeOption.Name;
                    var eachUnit = _specificationAttributeService.GetProductSpecificationAttributes(Model.Id).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each unit").FirstOrDefault().SpecificationAttributeOption.Name;
                    var eachQuantity = _specificationAttributeService.GetProductSpecificationAttributes(Model.Id).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "each quantity").FirstOrDefault().SpecificationAttributeOption.Name;
                    var displayTemplate = _specificationAttributeService.GetProductSpecificationAttributes(Model.Id).Where(x => x.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "product price display").FirstOrDefault().SpecificationAttributeOption.Name; ;

                    var tier1price = _productService.GetProductById(Model.Id).TierPrices.Count() > 0 ? _productService.GetProductById(Model.Id).TierPrices.First().Price : Model.ProductPrice.PriceValue;
                    var tier1Qty = _productService.GetProductById(Model.Id).TierPrices.Count() > 0 ? _productService.GetProductById(Model.Id).TierPrices.First().Quantity : int.Parse(eachQuantity);
                    var tier2price = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? _productService.GetProductById(Model.Id).TierPrices.ElementAt(1).Price : 0;
                    var tier2Qty = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? _productService.GetProductById(Model.Id).TierPrices.ElementAt(1).Quantity : 0;
                    var tier3price = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? _productService.GetProductById(Model.Id).TierPrices.ElementAt(2).Price : 0;
                    var tier3Qty = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? _productService.GetProductById(Model.Id).TierPrices.ElementAt(2).Quantity : 0;

                    var displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 0 ? displayTemplate.Replace("[pricetier1qty]", tier1Qty.ToString()) : "";
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier1qtyXeachqty]", (tier1Qty * Int32.Parse(eachQuantity)).ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 0 ? displayPriceString.Replace("[pricetier1amt]", Math.Round(tier1price, 2).ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 0 ? displayPriceString.Replace("[pricetier1amt/eachqty]", Math.Round(tier1price / Int32.Parse(eachQuantity), 2).ToString().TrimStart('0').TrimStart('.')) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier2qty]", tier2Qty.ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier2qtyXeachqty]", (tier2Qty * Int32.Parse(eachQuantity)).ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier2amt]", Math.Round(tier2price, 2).ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier2amt/eachqty]", Math.Round(tier2price / Int32.Parse(eachQuantity), 2).ToString().TrimStart('0').TrimStart('.')) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier3qty]", tier3Qty.ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 1 ? displayPriceString.Replace("[pricetier3qtyXeachqty]", (tier3Qty * Int32.Parse(eachQuantity)).ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier3amt]", Math.Round(tier3price, 2).ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier3amt/eachqty]", Math.Round(tier3price / Int32.Parse(eachQuantity), 2).ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier1amtXpricetier1qty]", Math.Round(tier1price * tier1Qty, 2).ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier2amtXpricetier2qty]", Math.Round(tier2price * tier2Qty, 2).ToString()) : displayPriceString;
                    displayPriceString = _productService.GetProductById(Model.Id).TierPrices.Count() > 2 ? displayPriceString.Replace("[pricetier3amtXpricetier3qty]", Math.Round(tier3price * tier3Qty, 2).ToString()) : displayPriceString;
                    displayPriceString = displayPriceString.Replace("[price]", Math.Round(Model.ProductPrice.PriceValue, 2).ToString());
                    displayPriceString = displayPriceString.Replace("[oldprice]", Model.ProductPrice.OldPrice);
                    displayPriceString = displayPriceString.Replace("[eachunit]", eachUnit);
                    displayPriceString = displayPriceString.Replace("[eachqty]", eachQuantity);
                    displayPriceString = displayPriceString.Replace("[packtype]", packType);
                    <span class="actual-price">@displayPriceString</span>
                }
                else
                {
                    if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                    }
                    <span class="price actual-price">@Model.ProductPrice.Price</span>
                }
                @if (Model.ProductPrice.DisplayTaxShippingInfo)
                {
                    var inclTax = EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <span class="tax-shipping-info">
                        @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </span>
                    }
            </div>
            @Html.Widget("productbox_addinfo_middle", Model.Id)
            <div class="buttons">
                <input type="button" value="@T("Products.Details")" class="button-2 product-box-add-to-cart-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
               @* @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    <input type="button" value="@(addToCartText)" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                }*@
                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                {
                    <input type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
                }
                @if (!Model.ProductPrice.DisableWishlistButton)
                {
                    <input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                }
            </div>
            @Html.Widget("productbox_addinfo_after", Model.Id)
        </div>
    </div>
</div>
