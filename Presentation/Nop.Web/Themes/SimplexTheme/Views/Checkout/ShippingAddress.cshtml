@model CheckoutShippingAddressModel
@using Nop.Web.Models.Checkout;
@using Nop.Web.Models.ShoppingCart;
@{
    CheckoutShippingMethodModel ShippingMethod = ViewBag.ShippingMethod as CheckoutShippingMethodModel;

    //CheckoutShippingMethodModel ShippingMethod = (CheckoutShippingMethodModel)ViewBag.ShippingMethod;


    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-shipping-address-page");
    var newShippingCheck = (Model.ExistingAddresses.Count > 0 )? "gbs-no-display": string.Empty;
    var existingShippingCheck = (Model.ExistingAddresses.Count > 0) ?  string.Empty : "gbs-no-display";
}

<div class="page checkout-page shipping-address-page col-sm-9 col-md-9 gbs-margin-bottom-20">

    @Html.Action("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Shipping })
    <div class="shipping-address-wrap row gbs-checkout-border">
        <div class="shipping-address-title">
            <h3>@T("Checkout.ShippingAddress")</h3>
        </div>
        <div class="shipping-address-inner-wrap">
            <div class="page-body checkout-data">
             @using (Html.BeginRouteForm("CheckoutShippingAddress", FormMethod.Post))
            {
            <input type="hidden" name="shippingType" id="hdn-shipping-type" value="Ground___Shipping.FixedRate"/>
            if (Model.AllowPickUpInStore && !Model.PickUpInStoreOnly && Model.PickupPoints.Any())
                {
                    <div class="section pickup-in-store" style="display:none;">
                            <div class="selector">
                                @Html.CheckBoxFor(x => x.PickUpInStore)
                                <label for="@Html.FieldIdFor(model => model.PickUpInStore)">@T("Checkout.PickupPoints").Text</label>
                            </div>
                            <div class="description">@T("Checkout.PickupPoints.Description")</div>
                            <script type="text/javascript">
                                $(document).ready(function () {
                                    $("#@Html.FieldIdFor(model => model.PickUpInStore)").change(togglePickUpInStore);
                                    //togglePickUpInStore();
                                });
                                function togglePickUpInStore() {
                                    if ($('#@Html.FieldIdFor(model => model.PickUpInStore)').is(':checked')) {
                                        $('#pickup-points-form').show();
                                        $('#shipping-addresses-form').hide();
                                    } else {
                                        $('#pickup-points-form').hide();
                                        $('#shipping-addresses-form').show();
                                    }
                                }
                            </script>
                        </div>
                }
                if (Model.AllowPickUpInStore)
                {
                    <div class="section pickup-points" id="pickup-points-form" style="display:none;">
                            @if (Model.PickupPoints.Any())
                            {
                                if (Model.PickUpInStoreOnly)
                                {
                            @Html.HiddenFor(x => x.PickUpInStore)
                                }
                            <div class="select-pickup-point">
                                @if (Model.PickupPoints.Count == 1)
                                    {
                                        var point = Model.PickupPoints.First();
                                    @Html.Hidden("pickup-points-id", string.Format("{0}___{1}", point.Id, point.ProviderSystemName))
                                    <ul>
                                        <li class="single-pickup-point name">@point.Name</li>
                                        <li class="single-pickup-point address">@(string.Format("{0} {1} {2}", point.Address, point.City, point.CountryName))</li>
                                        @if (!string.IsNullOrEmpty(point.PickupFee))
                                            {
                                            <li class="single-pickup-point fee">@point.PickupFee</li>
                                            }
                                    </ul>
                                    }
                                    else
                                    {
                                    <div class="title">
                                        <strong>@T("Checkout.PickupPoints.SelectPickupPoint")</strong>
                                    </div>
                                    <select name="pickup-points-id" id="pickup-points-select" class="address-select" title="">
                                        @foreach (var point in Model.PickupPoints)
                                            {
                                                var addressLine = new System.Text.StringBuilder();
                                                addressLine.Append(point.Name);
                                                if (!string.IsNullOrEmpty(point.Address))
                                                {
                                                    addressLine.AppendFormat(", {0}", point.Address);
                                                }
                                                if (!string.IsNullOrEmpty(point.City))
                                                {
                                                    addressLine.AppendFormat(", {0}", point.City);
                                                }
                                                if (!string.IsNullOrEmpty(point.CountryName))
                                                {
                                                    addressLine.AppendFormat(", {0}", point.CountryName);
                                                }
                                                if (!string.IsNullOrEmpty(point.PickupFee))
                                                {
                                                    addressLine.AppendFormat(", {0}", point.PickupFee);
                                                }
                                            <option value="@(string.Format("{0}___{1}", point.Id, point.ProviderSystemName))">@(addressLine)</option>
                                            }
                                    </select>
                                    }
                            </div>

                            if(Model.DisplayPickupPointsOnMap)
                            {
                                var src = string.Format("https://maps.googleapis.com/maps/api/js{0}", string.IsNullOrEmpty(Model.GoogleMapsApiKey) ? string.Empty : string.Format("?key={0}", Model.GoogleMapsApiKey));
                                <div class="pickup-points-map" id="map">
                                    <script type="text/javascript">
                                                var markers = new Map();
                                                var googleMap = null;
                                                $(document).ready(function () {
                                                    $.getScript("@src", function( data, textStatus, jqxhr ) {
                                                        google.maps.visualRefresh = true;
                                                        googleMap = new google.maps.Map(document.getElementById("map"), {
                                                            zoom: 15,
                                                            mapTypeId: google.maps.MapTypeId.ROADMAP
                                                        });
                                                        var geocoder = new google.maps.Geocoder();
                                                        var infowindow = new google.maps.InfoWindow();
                                                        @for (var i = 0; i < Model.PickupPoints.Count; i++)
                                                        {
                                                            var point = Model.PickupPoints[i];
                                                            var value = string.Format("{0}___{1}", point.Id, point.ProviderSystemName);
                                                            var pickupPointInfo = Html.Raw(string.Format(@"<div class='pickup-point-info'><ul><li><strong>{0}</strong></li><li>{1}</li><li>{2}</li></ul></div>",
                                                                point.Name, point.OpeningHours, point.PickupFee));
                                                            if (point.Latitude != null && point.Longitude != null)
                                                            {
                                                                <text>
                                                                    var marker = new google.maps.Marker({
                                                                        map: googleMap,
                                                                        title: "@point.Name",
                                                                        position: new google.maps.LatLng(@point.Latitude, @point.Longitude),
                                                                        icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                                                                    });
                                                                    markers.set("@value", marker);
                                                                    google.maps.event.addListener(marker, 'click', function () {
                                                                        $('#pickup-points-select').val("@value")
                                                                        infowindow.setContent("@pickupPointInfo");
                                                                        infowindow.open(googleMap, marker);
                                                                    });
                                                                    @if (i == 0)
                                                                    {
                                                                        <text>googleMap.setCenter(marker.getPosition())</text>
                                                                    }
                                                                </text>
                                                            }
                                                            else
                                                            {
                                                                var address = string.Format("{0} {1} {2} {3}", point.Address, point.City, point.ZipPostalCode, point.CountryName);
                                                                <text>
                                                                    geocoder.geocode({'address': "@address"}, function(results, status) {
                                                                        if (status === google.maps.GeocoderStatus.OK) {
                                                                            var marker = new google.maps.Marker({
                                                                                map: googleMap,
                                                                                title: "@point.Name",
                                                                                position: results[0].geometry.location,
                                                                                icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                                                                            });
                                                                            markers.set("@value", marker);
                                                                            google.maps.event.addListener(marker, 'click', function () {
                                                                                $('#pickup-points-select').val("@value")
                                                                                infowindow.setContent("@pickupPointInfo");
                                                                                infowindow.open(googleMap, marker);
                                                                            });
                                                                            @if (i == 0)
                                                                            {
                                                                                <text>googleMap.setCenter(marker.getPosition())</text>
                                                                            }
                                                                        };
                                                                    });
                                                                </text>
                                                            }
                                                        }

                                                        $('#pickup-points-select').change(function() {
                                                            new google.maps.event.trigger(markers.get(this.value), 'click' );
                                                        });

                                                        $("#@Html.FieldIdFor(model => model.PickUpInStore)").change(function() {
                                                            if ($('#@Html.FieldIdFor(model => model.PickUpInStore)').is(':checked')) {
                                                                var center = googleMap.getCenter();
                                                                google.maps.event.trigger(googleMap, 'resize');
                                                                googleMap.setCenter(center);
                                                            }
                                                        })
                                                    })
                                                })
                                    </script>
                                </div>
                            }
                            }
                            <div class="message-error">
                                <ul>
                                    @foreach (var warning in Model.Warnings)
                                    {
                                    <li>@warning</li>
                                    }
                                </ul>
                            </div>
                        </div>
                }
                if (!Model.PickUpInStoreOnly)
                {
            <div class="shipping-addresses" id="shipping-addresses-form">
                @Html.Widget("checkout_shipping_address_top")
                @Html.Partial("_AddressBookDropdown", Model)
                @*@if (Model.ExistingAddresses.Count > 0)
                    {
                        <a id="edit-saved-address">Edit Saved Address</a>
                    }*@

                @Html.Widget("checkout_shipping_address_middle")

                <div class="new-shipping-address @newShippingCheck">

                    @*<div class="title small-heading">
                            @if (Model.ExistingAddresses.Count > 0)
                            {
                                <strong>@T("Checkout.OrEnterNewAddress")</strong>
                            }
                            else
                            {
                                <strong>@T("Checkout.EnterShippingAddress")</strong>
                            }
                        </div>*@
                    <div class="enter-address">
                        <div class="message-error">
                            @{
                    var validationSummary = Html.ValidationSummary(true);
                            }
                        </div>
                        @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                                {
                                <div class="message-error">@validationSummary</div>
                                <script type="text/javascript">
                                    $(document).ready(function () {
                                        $("#shipping-address-dropdown").val('New Address');
                                        $(".new-shipping-address").show();
                                        $(".add-shipping-address-wrap").show();
                                        $("#local-pickup-msg").hide();
                                        $("#sh_phone_number").hide();
                                        $("#btn-next-step-to-payment").hide();
                                        $("#edit-saved-address").hide();
                                        $(".page.checkout-page.shipping-method-page").show();
                                        $("#PickUpInStore").prop("checked", false);
                                    });
                                </script>
                        }

                        <div class="enter-address-body form-horizontal">
                            @{
                                var dataDictAddress = new ViewDataDictionary();
                                //Merge ModelState (required for validation)
                                dataDictAddress.ModelState.Merge(ViewData.ModelState);
                                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                                    @Html.Partial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress)
                            }
                        </div>
                    </div>

                </div>

                @Html.Widget("checkout_shipping_address_bottom")
            </div>
            }
            <div id="sh_phone_number" style="display:none; padding-top:30px; padding-bottom:40px;" class="form-group">
                                    <strong>Contact Information :</strong>
                <div style="padding-top: 15px;">
                                        @Html.LabelFor(model => model.NewAddress.PhoneNumber, new { @class = "control-label col-sm-2 col-md-2" })
                                        <div class="visible-xs form-title-rquired">@Html.RequiredHint()</div>
                                        <div class="col-sm-6 col-md-6">
                                            @Html.TextBoxFor(model => model.NewAddress.PhoneNumber, new { @class = "form-control" })
                                        </div>
                                        <div class="col-sm-4 col-md-4">
                                                <div class="visible-lg visible-md visible-sm form-title-rquired">@Html.RequiredHint()</div>
                                            @Html.ValidationMessageFor(model => model.NewAddress.PhoneNumber)
                                    </div>
                </div>
                                </div>
            <div class="style-msg infomsg" id="local-pickup-msg" style="display:none;">
                <div class="sb-msg"><i class="icon-info-sign"></i><strong>NOTE</strong> Local pickup availible 7am-5pm PT Monday through Friday</div>
            </div>
            @Html.Partial("_ShippingMethod", ShippingMethod)

            <div class="add-shipping-address-wrap @newShippingCheck" >

                <button name="nextstep" type="submit" class="button button-rounded button-reveal button-small button-green tright"><i class="icon-line-arrow-right"></i><span>@T("Checkout.ContinueButton")</span></button>
            </div>


            }
                @Html.Widget("checkout_shipping_address_bottom")



            </div>

            <div class="select-shipping-address @existingShippingCheck">
                <button id="btn-next-step-to-payment" class="button button-rounded button-reveal button-small button-green tright"><i class="icon-line-arrow-right"></i><span>@T("Checkout.ContinueButton")</span></button>
            </div>
            <div class="gbs-required-field-wrap">
                <span class="gbs-required" aria-required="true">*</span> Required Field
            </div>
        </div>
    </div>

</div>

<div class="col-sm-3 col-md-3">
    @Html.Action("GBSOrderTotals", "GBSShoppingCart", new { isEditable = true })
</div>



<script type="text/javascript">
    $(document).ready(function () {
        $("#shipping-address-dropdown").change(function () { ShippingAddressDropdownChange($(this)); });
        $("#shipping-method-dropdown").change(function () { SetShippingMethod($(this));})
        $("#btn-next-step-to-payment").click(function () { NextStepToPayment(); });
    });
    function NextStepToPayment() {

        var url = $("#shipping-address-dropdown option:selected").attr("addressurl");
        if ($("#shipping-address-dropdown").val() != "Local Pickup") {
            setLocation(url + "&shipType=" + $("#shipping-method-dropdown").val());
        } else {
            setLocation(url + "&shipType=Ground___Shipping.FixedRate");
        }
    }
    function SetShippingMethod(evt)
    {
        $("#hdn-shipping-type").val(evt.val());
    }
    function ShippingAddressDropdownChange(evt) {
        var shippingVal = evt.val();
        switch (shippingVal) {
            case "New Address":
                $(".new-shipping-address").show();
                $(".add-shipping-address-wrap").show(); 
                $("#local-pickup-msg").hide();
                $("#sh_phone_number").hide();
                $("#btn-next-step-to-payment").hide();
                $("#edit-saved-address").hide();
                $(".page.checkout-page.shipping-method-page").show();
                $("#PickUpInStore").prop("checked", false);

                $("#shipping-method-dropdown").hide();


                break;
            case "checkout.localpickup":
            case "Local Pickup":
                $("#local-pickup-msg").show();
                $("#sh_phone_number").show();
                $(".new-shipping-address").hide();
                $(".add-shipping-address-wrap").show();
                $("#btn-next-step-to-payment").hide();
                $("#edit-saved-address").hide();
                $(".page.checkout-page.shipping-method-page").hide();
                $("#PickUpInStore").prop("checked", true);
                break;
            default:
                $("#local-pickup-msg").hide();
                $("#sh_phone_number").hide();
                $(".new-shipping-address").hide();
                $(".add-shipping-address-wrap").hide();
                $("#btn-next-step-to-payment").show();
                $(".page.checkout-page.shipping-method-page").show();
                $("#edit-saved-address").show();
                $("#PickUpInStore").prop("checked", false);

                
                var url = $("#shipping-address-dropdown option:selected").attr("addressurl");
                setLocation(url + "&shipType="); //leaving shiptype empty allows next step to work

                break;
        }
    }

    function EditShippingAddress()
    {
        $(".new-shipping-address").show();
    }
                                </script>
