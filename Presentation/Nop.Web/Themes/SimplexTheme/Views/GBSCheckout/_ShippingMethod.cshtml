@model CheckoutShippingMethodModel
@using Nop.Web.Models.Checkout;
@{

}

<div class="page checkout-page shipping-method-page">
    <div class="title small-heading">
        <strong>@T("Checkout.SelectShippingMethod")</strong>
    </div>
    <div class="page-body checkout-data">
        <div class="shipping-method ">

            
            @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_shipping_method_top" })
            @if (Model.Warnings.Count == 0)
            {
                <select id="shipping-method-dropdown" class="select-1 form-control">
                    @for (int i = 0; i < Model.ShippingMethods.Count; i++)
                    {
                        var shippingMethod = Model.ShippingMethods[i];
                        @*<li>
                        <div class="method-name">
                            <label class="radio" for="shippingoption_@(i)">
                                <input id="shippingoption_@(i)" type="radio" name="shippingoption" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" checked="@shippingMethod.Selected" />
                                @shippingMethod.Name (@shippingMethod.Fee)
                            </label>
                            @if (!String.IsNullOrEmpty(shippingMethod.Description))
                            {
                                <div class="method-description">
                                    @Html.Raw(shippingMethod.Description)
                                </div>
                            }
                        </div>

                    </li>*@
                        @*<option value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" @if (TempData.Peek("ShippingType") !=null && TempData.Peek("ShippingType").ToString()= =Model.ShippingMethods[i].Name.ToString() + "___" + Model.ShippingMethods[i].ShippingRateComputationMethodSystemName) { @: selected="selected"
                                }>
                            @shippingMethod.Name (@shippingMethod.Fee)



                        </option>*@
                    }
                </select>
                if (Model.NotifyCustomerAboutShippingFromMultipleLocations)
                {
                    <div class="multiple-locations">
                        @T("Checkout.ShippingMethod.ShippingFromMultipleLocations")
                    </div>
                }

            }
            else
            {
                <div class="message-error">
                    <ul>
                        @foreach (var warning in Model.Warnings)
                        {
                            <li>@warning</li>
                        }
                    </ul>
                </div>
            }

            @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_shipping_method_bottom" })


        </div>

    </div>
</div>
