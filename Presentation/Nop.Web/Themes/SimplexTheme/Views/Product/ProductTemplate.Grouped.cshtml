@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    var seoSettings = EngineContext.Current.Resolve<SeoSettings>();

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(productUrl);
    }
    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
}
<!--product breadcrumb-->
@Html.Partial("_ProductBreadcrumb", Model.Breadcrumb)
@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })
<div class="page product-details-page grouped">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential">
                    <div class="row">
                        @Html.Partial("_Discontinued", Model)
                        <div class="product-name panel-heading">
                            <h1 itemprop="name">
                                @Model.Name
                                @await Component.InvokeAsync("Widget", new { widgetZone = "product_artist_name", additionalData = Model.Id })
                            </h1>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                            <!--product pictures-->
                            @Html.Partial("_ProductDetailsPictures", Model)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures", additionalData = Model.Id })

                            @Html.Partial("_ProductSpecifications", Model.ProductSpecifications)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral", additionalData = Model.Id })

                            @if (!String.IsNullOrEmpty(Model.ShortDescription))
                            {
                                <div class="short-description">
                                    @Html.Raw(Model.ShortDescription)
                                </div>
                            }
                            @Html.Raw(Model.FullDescription)

                            @Html.Partial("_ProductTierPrices", Model.TierPrices)










                                <div class="overview">

                                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_top", additionalData = Model.Id })
                                    <!--product reviews-->
                                    @Html.Partial("_ProductReviewOverview", Model.ProductReviewOverview)
                                    <!--product manufacturers-->
                                    @Html.Partial("_ProductManufacturers", Model.ProductManufacturers)
                                    <!--compare, email a friend-->
                                    <div class="overview-buttons">
                                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_before", additionalData = Model.Id })
                                        @Html.Partial("_CompareProductsButton", Model)
                                        @Html.Partial("_ProductEmailAFriendButton", Model)
                                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_after", additionalData = Model.Id })
                                    </div>
                                    <!--price breaks-->
                                    @Html.Partial("_ShareButton", Model)
                                    @await Component.InvokeAsync("Widget", new { widgetZone = "product_category_titles", additionalData = Model.Id })
                                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_bottom", additionalData = Model.Id })
                                </div>

                        </div>



                        <div class="col-md-6">

                            <div class="product-collateral">
                                <!--associated products-->
                                <div class="product-variant-list row">
                                    @foreach (var variant in Model.AssociatedProducts)
                                    {
                                        <div class="product-variant-line" data-productid="@variant.Id">
                                            <div class="product-variant-wrapper">
                                                @if (!String.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                                                {
                                                    <div class="variant-picture">
                                                        <img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl"
                                                             title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />
                                                    </div>
                                                }
                                                <div class="variant-overview">
                                                    @if (!String.IsNullOrWhiteSpace(variant.Name))
                                                    {
                                                        <div class="variant-name">
                                                            @variant.Name
                                                        </div>
                                                    }
                                                    @if (!String.IsNullOrWhiteSpace(variant.ShortDescription))
                                                    {
                                                        <div class="variant-description">
                                                            @Html.Raw(variant.ShortDescription)
                                                        </div>
                                                    }
                                                    <!--availability-->
                                                    @Html.Partial("_Availability", variant)
                                                    <!--SKU, MAN, GTIN, vendor-->
                                                    @Html.Partial("_SKU_Man_GTIN_Ven", variant)
                                                    <!--delivery-->
                                                    @Html.Partial("_DeliveryInfo", variant)
                                                    <!--sample download-->
                                                    @Html.Partial("_DownloadSample", variant)
                                                    <!--rental info-->
                                                    @{
                                                        var dataDictRental = new ViewDataDictionary(ViewData);
                                                        dataDictRental.TemplateInfo.HtmlFieldPrefix = string.Format("rental_{0}", variant.Id);
                                                        @Html.Partial("_RentalInfo", variant, dataDictRental)
                                                    }

                                                    <!--attributes-->
                                                    @{
                                                        var dataDictAttributes = new ViewDataDictionary(ViewData);
                                                        dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", variant.Id);
                                                        @Html.Partial("_ProductAttributes", variant.ProductAttributes, dataDictAttributes)
                                                    }
                                                    <!--price & add to cart-->
                                                    @{
                                                        var dataDictPrice = new ViewDataDictionary(ViewData);
                                                        dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", variant.Id);
                                                        @Html.Partial("_ProductPrice", variant.ProductPrice, dataDictPrice)
                                                    }
                                                    <!--gift card-->
                                                    @{
                                                        var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                                        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", variant.Id);
                                                        @Html.Partial("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                                                    }
                                                    @{
                                                        var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                                        dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", variant.Id);
                                                        @Html.Partial("_AddToCart", variant.AddToCart, dataDictAddToCart)
                                                    }
                                                    <div class="form-group overview-buttons">
                                                        <!--wishlist-->
                                                        @{
                                                            var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                                            dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", variant.Id);
                                                            @Html.Partial("_AddToWishlist", variant.AddToCart, dataDictAddToWishlist)
                                                        }
                                                    </div>
                                                    @if (Model.AssociatedProducts.Count == 0)
                                                    {
                                                        <div class="no-associated-products">
                                                            @T("Products.NoAssociatedProducts")
                                                        </div>
                                                    }
                                                </div>

                                            </div>
                                        </div>
                                    }
                                    @*we do not display "also purchased" for grouped products
        @Html.Action("ProductsAlsoPurchased", "Product", new { productId = Model.Id })*@
                                    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })

                                    <div class="product-tags">
                                        <h4>Keywords</h4>
                                        @Html.Partial("_ProductTags", Model.ProductTags)
                                    </div>



                                </div>

                            </div>
                        </div>




                    </div>






                </div>

            </div>
        </form>
    </div>
</div>

