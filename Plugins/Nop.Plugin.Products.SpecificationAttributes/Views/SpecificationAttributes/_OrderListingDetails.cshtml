@model Nop.Plugin.Products.SpecificationAttributes.Models.CustomerOrderListModel.OrderDetailsModel
@using Nop.Plugin.DataAccess.GBS;
@using Nop.Core.Infrastructure;
@using Nop.Services.Catalog;
@using Nop.Core;
@using Nop.Services.Stores;
@using Nop.Web.Framework;
@using Nop.Web;
@{ 
    var _productService = EngineContext.Current.Resolve<IProductService>();
    var _storeContext = EngineContext.Current.Resolve<IStoreContext>();
    var _storeMappingService = EngineContext.Current.Resolve<IStoreMappingService>();
    var _storeService = EngineContext.Current.Resolve<IStoreService>();
}

<div class="order-list">
    <span class="hidden"> @Model.Monthvalue</span>
    @if (Model.Items.Count > 0)
    {
        <div class="orderhead-section">
            <div class="head-col1">
                <span class="order-label">@T("Account.CustomerOrders.OrderDate")</span>
                <div class="order-date">@Model.CreatedOn.ToString()</div>
            </div>
            <div class="head-col2">
                <span class="order-label">@T("Account.CustomerOrders.OrderTotal")</span>
                <div class="order-date">@Model.OrderTotal</div>
            </div>
            <div class="head-col3">
                @*<span class="order-label">ShipTo</span>
                <div class="rachel">
                    <select>
                        <option>@Model.ShipTo</option>
                    </select>
                </div>*@
            </div>
            <div class="head-col4">
                <div class="order-label">@T("Account.CustomerOrders.OrderNumber"): @if (@Model.CustomProperties.ContainsKey("orderNo") ){@Model.CustomProperties["orderNo"]}<span id="@if (@Model.CustomProperties.ContainsKey("orderNo") ){@Model.CustomProperties["orderNo"]}" class="hidden">@Model.Id</span></div>
                <div class="order-links">

                    @*ToDo - check if legacy, then call different action on GBSOrderController to get legacy order data and return normal order details view*@

                    @if (@Model.CustomProperties.ContainsKey("isLegacy") &&  Convert.ToBoolean(@Model.CustomProperties["isLegacy"])){
                            <a href = "@Url.RouteUrl("OrderDetailsL", new { orderId = Model.Id })" > Order Details </a > <span>|</span>
                            <a href = "@Url.RouteUrl("GetOrderPdfInvoiceL", new { orderId = Model.Id })" > Invoice </a >
                        }
                        else
                        {
                            <a href = "@Url.RouteUrl("OrderDetails", new { orderId = Model.Id })" > Order Details </a > <span>|</span>
                            <a href = "@Url.RouteUrl("GetOrderPdfInvoice", new { orderId = Model.Id })" > Invoice </a >
                        }
                </div>
            </div>
        </div>

        <div class="panel panel-default order-productlist">
            <div class="productlist-left">
                    <div class="orderstatus">
                        @T("Account.CustomerOrders.OrderStatus"):
                        @if (@Model.OrderStatus != "Cancelled")
                            {
                            <strong class="space"> @Model.ShippingStatus  </strong>
                            if (@Model.ShippingStatus.Contains(@T("enums.nop.core.domain.Shipping.ShippingStatus.Shipped").ToString()))
                            {                                
                                <div class="ordertimeline"><span style="width:70%;"></span></div>
                            }
                            else if (@Model.ShippingStatus.Contains(@T("enums.nop.core.domain.Shipping.ShippingStatus.Delivered").ToString()))
                            {                                
                                <div class="ordertimeline"><span style="width:100%;"></span></div>
                            }
                            else
                            {                                
                                 <div class="ordertimeline"><span style="width:15%;"></span></div>
                            }
                        }
                        else
                        {
                            <strong class="red">@Model.OrderStatus</strong>
                        }

                    </div>
                    @foreach (var item in Model.Items)
                    {
                        string color = item.DefaultColor;
                        string className = item.ClassName;

                        <div class="prdouctrow-list product-item" data-productid="@item.Id">

                            <div class="order-productimg picture" style="@color">
                                <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" title="@item.ProductName" class="@className">
                                    <img alt="@item.ProductName" src="@item.ImageUrl" title="@item.ProductName" />
                                </a>
                            </div>
                            <div class="productname-price">
                                <div class="order-productname"><a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })">@item.ProductName</a></div>
                                <div class="product-unit-price">@item.UnitPrice</div>
                                <div>
                                    @if (Model.IsReOrderAllowed)
                                    {
                                        if (@Model.CustomProperties.ContainsKey("isLegacy") && Convert.ToBoolean(@Model.CustomProperties["isLegacy"]))
                                        {
                                            var product = _productService.GetProductBySku(item.Sku);
                                            if (product != null)
                                            {
                                                var stores = _storeMappingService.GetStoresIdsWithAccess<Nop.Core.Domain.Catalog.Product>(_productService.GetProductBySku(item.Sku));
                                                var NCCStore = _storeService.GetAllStores().Where(x => x.Name == "Note Card Cafe").FirstOrDefault();
                                                var HOMStore = _storeService.GetAllStores().Where(x => x.Name == "House of Magnets").FirstOrDefault();
                                                if (_storeContext.CurrentStore.Id == HOMStore.Id)
                                                {
                                                    if (stores.Where(x => x == HOMStore.Id).Any())
                                                    {
                                                    <input type="button" value="Buy It Again" class="buyitagain" onclick="setLocation('@Url.RouteUrl("BuyItAgain", new { orderItemId = item.Id, isLegacy = true })   ')" />
                                                    }
                                                    else if (stores.Where(x => x == NCCStore.Id).Any())
                                                    {
                                                    <a class="" target="_blank" href="@NCCStore.Url@Url.RouteUrl("BuyItAgain", new { orderItemId = item.Id, isLegacy = true })">Buy it again at Note Card Café</a>
                                                    }
                                                }
                                                else if (_storeContext.CurrentStore.Id == NCCStore.Id)
                                                {
                                                    if (stores.Where(x => x == NCCStore.Id).Any())
                                                    {
                                                        <input type="button" value="Buy It Again" class="buyitagain" onclick="setLocation('@Url.RouteUrl("BuyItAgain", new { orderItemId = item.Id, isLegacy = true })   ')" />
                                                    }
                                                    else if (stores.Where(x => x == HOMStore.Id).Any())
                                                    {
                                                        <a class="" target="_blank" href="@HOMStore.Url@Url.RouteUrl("BuyItAgain", new { orderItemId = item.Id, isLegacy = true })">Buy it again at House of Magnets</a>
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                        <input type="button" value="Buy It Again" class="buyitagain" onclick="setLocation('@Url.RouteUrl("BuyItAgain", new { orderItemId = item.Id, isLegacy = false })   ')" />
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            <div class="productlist-right">
                    <ul>
                        <li>
                            @if (@Model.CustomProperties.ContainsKey("isLegacy") && Convert.ToBoolean(@Model.CustomProperties["isLegacy"]))
                            {
                                <a href="@Url.RouteUrl("OrderDetailsL", new { orderId = Model.Id })" class="btn btn-primary details-order-button">Order Details</a>
                            }
                            else
                            {
                                <a href="@Url.RouteUrl("OrderDetails", new { orderId = Model.Id })" class="btn btn-primary details-order-button">Order Details</a>
                            }
                        </li>
                        <li>
                            <a href="#">Track Package</a>
                        </li>
                        <li>
                            <a href="#">Cancel Order</a>
                        </li>
                        <li>
                            @if (Model.IsReturnRequestAllowed)
                                {
                                <input type="button" value="Return Item" onclick="setLocation('@Url.RouteUrl("ReturnRequest", new { orderId = Model.Id })    ')" />
                                }
                        </li>
                    </ul>
                </div>
            </div>
    }
</div>

