@{
    Layout = "";
}
@model CanvasProductModel
@using Nop.Plugin.Order.GBS.Models;
@using Nop.Web.Framework;
@using Nop.Core;
@using Nop.Core.Infrastructure;
@using Nop.Web.Framework.Themes;
@using Nop.Web.Framework.UI;
@using System.Web.Mvc;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Http;


@{ 
	var request = EngineContext.Current.Resolve<IHttpContextAccessor>().HttpContext.Request;
	var themeName = EngineContext.Current.Resolve<IThemeContext>().WorkingThemeName;
	string ccFilesJSON = JsonConvert.SerializeObject(Model.productFileModels, Formatting.None);
	var productType = Model.productType;
    }
<script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js">
</script>
<link href="/Themes/@themeName/Content/css/font-icons.css" rel="stylesheet" type="text/css">
<link href="/Themes/@themeName/Content/css/font-awesome.min.css" rel="stylesheet" type="text/css">
<link href="/Themes/@themeName/Content/css/canvas.css" rel="stylesheet" type="text/css">
<script id="jquery_validate_plugin" type="text/javascript" src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.14.0/jquery.validate.js"></script>

<!-- The IFrame API script. IMPORTANT! Do not remove or change the ID. -->
<script id="CcIframeApiScript" type="text/javascript" src="@Model.canvasServerBaseURL/Resources/SPEditor/Scripts/IFrame/IframeApi.js">
</script>

<script>
     $(document).ready(function() {

         $("#CopyFilesToProduction_Form").validate({
             rules: {
                 surfaces: "required",
             },
             messages: {
                 surfaces: "* You must select at least one surface.",
             },
             errorContainer: "#messageBox1",
             errorLabelContainer: "#messageBox1 ul",
             wrapper: "li"   
         });

});


</script>
<script>
    $(function () {
        //Defining the product.
        productDefinition = '@Model.stateID';//{surfaces: ["stamp"]};

        //Defining the editor configuration.
        configuration = {
            initialMode: "Advanced",
            restoreProductOnReloadEnabled: false,
            widgets: {
                FinishButton: {
                    mode: "Disabled"
                }
            },
            rendering: {
                hiResOutputToSeparateFiles: true
            }
        };

        var productType = "@productType";
        configuration.userId = "@Model.userID";
        var ccFiles = @Html.Raw(@ccFilesJSON);
        var ccFilesOriginal = @Html.Raw(@ccFilesJSON);
        var canvasBaseUrl = "@Model.canvasServerBaseURL";
        var sessionID = "@Model.sessionID";

        var editorFrame = $("#editorFrame");

        var editor = null;

        function handleError(error, message) {
            console.error(message, error);
            return error;
        };
        function toggleTextsEdit(isEnableEdit) {
            spEditor.productHandler.getAllItems().forEach(function(item) {
                if (item instanceof CustomersCanvas.Model.BaseTextItem) {
                    item.locked = !isEnableEdit;
                }
            });
            spEditor.productHandler.updateItems(spEditor.productHandler.getAllItems())
        }

        var loadData = null;

        //Loading a product into the editor.
        function loadProduct(product) {

            //Loading the editor.
            CustomersCanvas.IframeApi.loadEditor(editorFrame[0], product, configuration)
                //If the editor has been successfully loaded.
                .then(function (e) {
                    editor = e;
                    editor.eval(toggleTextsEdit, true);
                })
                //If there was an error thrown when loading the editor.
                .catch(function (error) {
                    loadData = handleError(error, "Load failed with exception: ");
                });
        }


        //Loading the product defined above into the editor.
        loadProduct(productDefinition);

        var currentPage = "design";

        //Object containing data generated by getProofImages.
        var approveData = null;

        //Object containing data generated by finishProductDesign.
        var renderData = null;

        //Object containing data generated by saveProduct.
        var saveData = null;

        //Saving the product and getting links to proof images.
        $("#editorPage #nextButton").click(function () {

            //Saving a product.
            editor.saveProduct(productDefinition)
                //If the product has been successfully saved.
                .then(function (result) {
                    //Saving product state info.
                    saveData = result;
                })
                //If there was an error thrown when saving the product.
                .catch(function (error) {
                    saveData = handleError(error, "Save failed with exception: ");
                });
            //Getting proof images.
            editor.getProofImages()
                //If proof images have been successfully received.
                .then(function (result) {
                    //Saving proof images info.
                    approveData = result;

                    //Go to the approval page.
                    goToPage("approve");
                })
                //If there was an error thrown when getting proof images.
                .catch(function (error) {
                    approveData = handleError(error, "Getting proof images failed with exception: ");
                });
        });

        //Completing product customization.
        $("#approvePage #approveButton").click(function () {

            ////Completing product customization.
            //editor.finishProductDesign()
            //    //If product customization has been successfully completed.
            //    .then(function (result) {
            //        //Saving hi-res output info.
            //        renderData = result;

            //        //Go to the finish page.
            //        goToPage("finish");
            //    })
            //    //If there was an error thrown when completing product customization.
            //    .catch(function (error) {
            //        renderData = handleError(error, "Product customization completion failed with exception: ");
            //    });

            goToPage("finish");
        });

        //Opening a new product in the designer.
        $("#finishOrderPage #newDesign").click(function () {
            goToPage("design");
        });

        //Reopening the product in the designer.
        $(".lnkEditAgain").click(function () {
            loadProduct(productDefinition);
            goToPage("design");
        });

        //Initializing the approval and finish pages with the product info.

        //Initializing the approval page with links to the proof images.
        function setApprovePageData() {
            var previewElements = $("#approvePage .previewImg").attr("src", "");
            for (var i = 0; i < approveData.proofImageUrls.length && i < previewElements.length; i++) {
                previewElements[i].setAttribute("src", approveData.proofImageUrls[i]);
            }
        };

        function getSurfaceDisplayValue(surface) {
            if (surface == "B") { return "Back"; }
            if (surface == "F") { return "Front"; }
            return surface;
        }

        function arrayLookup(array, prop1, prop2, val) {
            for (var i = 0, len = array.length; i < len; i++) {
                if (!prop2 && array[i].hasOwnProperty(prop1) && array[i][prop1] === val) {
                    return array[i];
                } else if (prop2 && array[i].hasOwnProperty(prop1) && array[i][prop1].hasOwnProperty(prop2) && array[i][prop1][prop2] === val) {
                    return array[i];
                }
            }
            return null;
        }

        function completeCCFilesList(ccFiles) {
            switch(productType){
                case "notecard":
                    if (arrayLookup(ccFiles, "product", "surface", "greeting") == null) {
                        var newfile = $.extend(true, {}, ccFiles[0]);
                        newfile.product.surface = "greeting";
                        newfile.product.productType = productType;
                        newfile.product.imprintColor = "1";
                        newfile.requestSessionID = sessionID;
                        newfile.product.productionFileName = "";
                        newfile.product.hiResPDFURL = canvasBaseUrl + "/api/rendering/GetHiResOutput/" + configuration.userId + "/" + productDefinition + "/1_-1.pdf";
                        ccFiles.splice(1, 0, newfile);
                    }
                    break;
                case "envelope":
                    if (ccFiles.length > 0) {
                        if (arrayLookup(ccFiles, "product", "surface", "F") == null) {
                            var newfile = $.extend(true, {}, ccFiles[0]);
                            newfile.product.surface = "F";
                            newfile.product.productType = productType;
                            newfile.product.imprintColor = "1";
                            newfile.requestSessionID = sessionID;
                            newfile.product.productionFileName = "";
                            newfile.product.hiResPDFURL = canvasBaseUrl + "/api/rendering/GetHiResOutput/" + configuration.userId + "/" + productDefinition + "/0_-1.pdf";
                            ccFiles.splice(0, 0, newfile);
                        }
                        if (arrayLookup(ccFiles, "product", "surface", "B") == null) {
                            var newfile = $.extend(true, {}, ccFiles[0]);
                            newfile.product.surface = "B"; 
                            newfile.product.productType = productType;
                            newfile.product.imprintColor = "1";
                            newfile.requestSessionID = sessionID;
                            newfile.product.productionFileName = "";
                            newfile.product.hiResPDFURL = canvasBaseUrl + "/api/rendering/GetHiResOutput/" + configuration.userId + "/" + productDefinition + "/1_-1.pdf";
                            ccFiles.splice(1, 0, newfile);
                        }
                    } else {
                        //create new surfaces
                        var hiResUrl = canvasBaseUrl + "/api/rendering/GetHiResOutput/" + configuration.userId + "/" + productDefinition + "/0_-1.pdf";
                        var newfile = { product: { surface: "F", imprintColor: "1", hiResPDFURL: hiResUrl, productType: productType }, requestSessionID: sessionID };
                        ccFiles.splice(0, 0, newfile);
                        var hiResUrl = canvasBaseUrl + "/api/rendering/GetHiResOutput/" + configuration.userId + "/" + productDefinition + "/1_-1.pdf";
                        var newfile = { product: { surface: "B", imprintColor: "1", hiResPDFURL: hiResUrl, productType: productType }, requestSessionID: sessionID };
                        ccFiles.splice(1, 0, newfile);
                    }
                    break;
                default:
                    break;
            }
        }

        //Initializing the finish page with the print-ready output URL and a link for reopening the product in the designer for further editing.
        function setFinishPageData() {
            //var ccChangedFiles = [];
            $("#finishOrderPage #hiResLinks").empty();
            $("#finishOrderPage #surfaces").empty();
            completeCCFilesList(ccFiles);
            ccFiles.forEach(function(file,j) {
                $("#finishOrderPage #hiResLinks").html($("#finishOrderPage #hiResLinks").html() + '<a href="' + file.product.hiResPDFURL + '">Download link #' + j + '</a>, ');
                $("#finishOrderPage #surfaces").html($("#finishOrderPage #surfaces").html() + '<input class = "surfaces" type="checkbox" id="' + getSurfaceDisplayValue(file.product.surface) + '" name="surfaces" value="' + getSurfaceDisplayValue(file.product.surface) + '">' + '<label for="' + getSurfaceDisplayValue(file.product.surface) + '" > ' + getSurfaceDisplayValue(file.product.surface) +'</label> ');
            });
            //$.each(renderData.hiResOutputUrls, function (i, val) {
            //    $("#finishOrderPage #hiResLinks").html($("#finishOrderPage #hiResLinks").html() + '<a href="' + val + '">Download link #' + i + '</a>, ');
            //    ccFiles.forEach(function(file,j) {
            //        var endStr = val.slice(-7);
            //        var index = endStr.substring(0,1);
            //        switch(productType){
            //            case "notecard":
            //                if (file.product.productType != "notecard"){delete ccFiles[j]; break;}
            //                switch(file.product.surface){
            //                    case "front":
            //                        if (index == 0) {file.product.hiResPDFURL = val;}
            //                        break;
            //                    case "greeting":
            //                        if (index == 1) {file.product.hiResPDFURL = val;}
            //                        break;
            //                    case "back":
            //                        if (index == 2) {file.product.hiResPDFURL = val;}
            //                        break;
            //                    default:
            //                }
            //                break;
            //            case "envelope":
            //                if (file.product.productType != "envelope"){delete ccFiles[j]; break;}
            //                switch(file.product.surface){
            //                    case "F":
            //                        if (index == 0) {file.product.hiResPDFURL = val;}
            //                        break;
            //                    case "B":
            //                        if (index == 1) {file.product.hiResPDFURL = val;}
            //                        break;
            //                    default:
            //                }
            //                break;
            //            default:
            //                switch(file.product.surface){
            //                    case "front":
            //                        if (index == 0) {file.product.hiResPDFURL = val;}
            //                        break;
            //                    case "back":
            //                        if (index == 1) {file.product.hiResPDFURL = val;}
            //                        break;
            //                    default:
            //                }
            //        }
            //    });
            //});
            $('#FilesToCopy').val(JSON.stringify(ccFiles));
            // $("#finishOrderPage #hiResLink").attr("href", renderData.hiResOutputUrls[0]);
            $("#finishOrderPage #linkForFeatureEdit").attr("href", saveData.returnToEditUrl);
        };

        function setEditorPageData() {
            loadProduct(productDefinition);
        };

        //Wizard navigation.

        function goToPage(to) {
            setupPage(to);
        }
        window.onpopstate = function (e) { setupPage(e.state); }

        var workflowPages = {
            "design": { elements: $("#editorPage"), setData: setEditorPageData },
            "approve": { elements: $("#approvePage"), setData: setApprovePageData },
            "finish": { elements: $("#finishOrderPage"), setData: setFinishPageData }
        }

        function setupPage(page) {
            var destPageData = workflowPages[page]

            if (typeof destPageData.setData === "function")
                destPageData.setData();

            workflowPages[currentPage].elements.fadeOut(function () {
                destPageData.elements.show();

                currentPage = page;
            });
        }
    })
</script>
<style>
    #bodywrapper {
        padding: 10px 10%;
    }
    #header {
        margin-bottom: -3%;
    }
    #CopyFilesToProduction_Form, #approveButtonWrapper, #returnButtonWrapper {
        display: inline;
    }
    #approveButton, #lnkEditAgain {
        margin: 1%;
    }
    #content {
        height: 110%;
    }
    .surfaces {
        margin-left: 1% !important;
        margin-right: 5px !important;
    }
    #messageBox1 label.error {
        display: inline-block !important;
    }
</style>

<div id="bodywrapper">
    <div id="header" class="h4">
        Customer Username: @Model.username,  GBS Order Number: @Model.gbsOrderId, ProductType: @Model.productType
    </div>
    <div id="content">
        <!-- Design page -->
        <div id="editorPage" class="area">
            <div id="iframeWrapper">
                <iframe id="editorFrame" width="100%" height="800px"></iframe>
            </div>
            <div id="saveAndNextButtonsWrapper">
                <!-- Finish design button -->
                <input id="nextButton" type="button" class="btn btn-success btn-lg" value="Finish design" />
            </div>
        </div>
        <!-- Approval page -->
        <div id="approvePage" class="area" style="display: none">
            <div class="container-fluid">
                <h1>Approve Your Product</h1>
                <!-- proof images -->
                <img class="previewImg" id="preview" />
                <img class="previewImg" id="previewPage2" />
                <img class="previewImg" id="previewPage3" />
                <img class="previewImg" id="previewPage4" />
                <img class="previewImg" id="previewPage5" />
            </div>
            <div id="ApproveButtonsWrapper">
                <div id="approveButtonWrapper">
                    <input id="approveButton" type="button" class="btn btn-success btn-lg" value="Approve" />
                </div>
                <div id="returnButtonWrapper" class="return">
                    <input id="lnkEditAgain" type="button" class="lnkEditAgain btn btn-info btn-lg" value="Edit Again" />
                </div>
            </div>
            </div>

        <!-- Finish page -->
        <div id="finishOrderPage" class="area" style="display: none">
            <h1 class="">Your Product is Ready</h1>
            <ul>
                <!-- a link for downloading the hi-res output -->
                <li>The print-ready file can be downloaded from these links: <span id="hiResLinks"></span></li>
            </ul>
            <div id ="ProductReadyButtonsDiv"class="right">
                <input id="lnkEditAgain2" type="button" class="lnkEditAgain btn btn-info btn-lg" value="Edit Again" />
                @using (Html.BeginRouteForm("CopyFilesToProduction", Microsoft.AspNetCore.Mvc.Rendering.FormMethod.Post, new { id = "CopyFilesToProduction_Form" }))
                {
                    @Html.Hidden("FilesToCopy","[]", new { id = "FilesToCopy" })
                    @Html.Hidden("OPID", request.Query["orderitemid"], new { id = "OPID" })
                    @Html.Hidden("productType", request.Query["productType"], new { id = "productType" })
                    @Html.Hidden("webPlatform", request.Query["webPlatform"], new { id = "webPlatform" })
                    <input id="replaceIntranet" type="submit" class="btn btn-info btn-lg" value="Replace Production Files" />
                    <span id="surfaces"></span>
                }
                <div id="messageBox1">
                    <!- errorContainer ->
                    <ul>
                    </ul>
                </div>

            </div>
        </div>
    </div>
</div>