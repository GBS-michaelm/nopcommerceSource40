using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using Nop.Core;
using Nop.Core.Domain.Catalog;
using Nop.Core.Domain.Common;
using Nop.Core.Domain.Customers;
using Nop.Core.Domain.Directory;
using Nop.Core.Domain.Discounts;
using Nop.Core.Domain.Localization;
using Nop.Core.Domain.Logging;
using Nop.Core.Domain.Orders;
using Nop.Core.Domain.Payments;
using Nop.Core.Domain.Shipping;
using Nop.Core.Domain.Tax;
using Nop.Core.Domain.Vendors;
using Nop.Services.Affiliates;
using Nop.Services.Catalog;
using Nop.Services.Common;
using Nop.Services.Customers;
using Nop.Services.Directory;
using Nop.Services.Discounts;
using Nop.Services.Events;
using Nop.Services.Localization;
using Nop.Services.Logging;
using Nop.Services.Messages;
using Nop.Services.Payments;
using Nop.Services.Security;
using Nop.Services.Shipping;
using Nop.Services.Tax;
using Nop.Services.Vendors;
using Nop.Services.Orders;
using WebServices.Models.Orders;
using GBSOrderIDConvert;
using Nop.Plugin.Order.GBS;
using Nop.Data;
using Nop.Core.Data;
using Nop.Plugin.DataAccess.GBS;
using Nop.Web.Framework;
using Nop.Core.Plugins;
using Nop.Plugin.Widgets.CustomersCanvas.Services;
using Nop.Core.Infrastructure;
using Nop.Plugin.Widgets.CustomersCanvas;
using Nop.Services.Configuration;
using WebServices.Models.File;
using Newtonsoft.Json;
using System.Web;

namespace Nop.Services.Custom.Orders
{
    public class GBSOrderProcessingService : OrderProcessingService
    {
        private readonly GBSOrderSettings _gbsOrderSettings;
        private readonly IPluginFinder _pluginFinder;
        private readonly IWorkContext _workContext;
        private readonly IStoreContext _storeContext;        //private readonly GBSOrderSettings _gbsStoreNamePrepend;
        private readonly IProductAttributeParser _productAttributeParser;
        private readonly CcSettings _customersCanvasSettings;
        private readonly ILogger _logger;

        public GBSOrderProcessingService(
            ISettingService settingService,
            IStoreContext storeContext,
            IPluginFinder pluginFinder, 
            GBSOrderSettings gbsOrderSettings, 
            IOrderService orderService, 
            IWebHelper webHelper, 
            ILocalizationService localizationService, 
            ILanguageService languageService, 
            IProductService productService, 
            IPaymentService paymentService, 
            ILogger logger, 
            IOrderTotalCalculationService orderTotalCalculationService, 
            IPriceCalculationService priceCalculationService, 
            IPriceFormatter priceFormatter, 
            IProductAttributeParser productAttributeParser, 
            IProductAttributeFormatter productAttributeFormatter, 
            IGiftCardService giftCardService, 
            IShoppingCartService shoppingCartService, 
            ICheckoutAttributeFormatter checkoutAttributeFormatter, 
            IShippingService shippingService, 
            IShipmentService shipmentService, 
            ITaxService taxService, 
            ICustomerService customerService, 
            IDiscountService discountService, 
            IEncryptionService encryptionService, 
            IWorkContext workContext,
            IWorkflowMessageService workflowMessageService, 
            IVendorService vendorService, 
            ICustomerActivityService customerActivityService, 
            ICurrencyService currencyService, 
            IAffiliateService affiliateService,
            IEventPublisher eventPublisher, 
            IPdfService pdfService, 
            IRewardPointService rewardPointService,
            IGenericAttributeService genericAttributeService, 
            ShippingSettings shippingSettings, 
            PaymentSettings paymentSettings, 
            RewardPointsSettings rewardPointsSettings, 
            OrderSettings orderSettings, 
            TaxSettings taxSettings, 
            LocalizationSettings localizationSettings,
            CurrencySettings currencySettings,
            ICountryService countryService) 
            : base
            (orderService, 
                  webHelper, 
                  localizationService, 
                  languageService, 
                  productService, 
                  paymentService, 
                  logger,
                  orderTotalCalculationService, 
                  priceCalculationService, 
                  priceFormatter,
                  productAttributeParser, 
                  productAttributeFormatter,
                  giftCardService, 
                  shoppingCartService,
                  checkoutAttributeFormatter,
                  shippingService, 
                  shipmentService, 
                  taxService,
                  customerService,
                  discountService,
                  encryptionService, 
                  workContext,
                  workflowMessageService, 
                  vendorService,
                  customerActivityService,
                  currencyService,
                  affiliateService, 
                  eventPublisher, 
                  pdfService, 
                  rewardPointService, 
                  genericAttributeService,
                  countryService,
                  shippingSettings, 
                  paymentSettings,
                  rewardPointsSettings,
                  orderSettings,
                  taxSettings, 
                  localizationSettings, 
                  currencySettings

                  )
        {

            this._gbsOrderSettings = gbsOrderSettings;
            this._pluginFinder = pluginFinder;
            this._workContext = workContext;
            this._storeContext = storeContext;
            this._productAttributeParser = productAttributeParser;
            this._customersCanvasSettings = settingService.LoadSetting<CcSettings>();
            this._logger = logger;
        }

        private void SaveGBSOrderID(string gbsOrderId, int NOPOrderID)
        {
            //write code to save this to our new table.
        }
        public override PlaceOrderResult PlaceOrder(ProcessPaymentRequest processPaymentRequest)
        {
            PlaceOrderResult myResult = null;
            CustomTokenProvider orderProv = null;
            string gbsOrderId = null;
            var customer = _workContext.CurrentCustomer;
            try
            {
                
                var miscPlugins = _pluginFinder.GetPlugins<MyOrderServicePlugin>(storeId: processPaymentRequest.StoreId).ToList();
                if (miscPlugins.Count > 0) { 


                    string address = _gbsOrderSettings.GBSOrderWebServiceAddress;
                    GBSOrderServiceClient myOrderService = new GBSOrderServiceClient();

                    OrderIDConversionModel orderData = new OrderIDConversionModel(); //object that will hold the website name inside of it productData.websiteName
                    orderData.websiteName = _gbsOrderSettings.GBSStoreNamePrepend; //"NOP";
                    gbsOrderId = myOrderService.ConvertID(orderData, address, _gbsOrderSettings.LoginId, _gbsOrderSettings.Password);
                    Object value = null;
                        
                    NopResourceDisplayName orderNumberKeyGBS = new NopResourceDisplayName(("Account.CustomerOrders.OrderNumber"));

                    // will be return from calling 
                    if (processPaymentRequest.CustomValues.TryGetValue(orderNumberKeyGBS.DisplayName, out value))
                    {
                        processPaymentRequest.CustomValues[orderNumberKeyGBS.DisplayName] = gbsOrderId;
                    }
                    else
                    {
                        processPaymentRequest.CustomValues.Add(orderNumberKeyGBS.DisplayName, gbsOrderId);
                    }
                }

                myResult = base.PlaceOrder(processPaymentRequest);

                if (miscPlugins.Count > 0)
                {
                    
                    DBManager manager = new DBManager();

                    if (myResult.PlacedOrder != null)
                    {
                        Dictionary<string, string> paramDic = new Dictionary<string, string>();
                        paramDic.Add("@nopID", myResult.PlacedOrder.Id.ToString());
                        paramDic.Add("@gbsOrderID", gbsOrderId);

                        string insert = "INSERT INTO tblNOPOrder (nopID, gbsOrderID) ";
                        insert += "VALUES ('" + myResult.PlacedOrder.Id + "', '" + gbsOrderId + "')";
                        manager.SetParameterizedQueryNoData(insert, paramDic);

                        ICcService ccService = EngineContext.Current.Resolve<ICcService>();
                        

                        List<ExtendedOrderItem> extendedOrderItems = new List<ExtendedOrderItem>();
                        List<ProductFileModel> ccFiles = new List<ProductFileModel>();

                        foreach (var item in myResult.PlacedOrder.OrderItems)
                        {
                            ExtendedOrderItem extendedOrderItem = new ExtendedOrderItem();
                            extendedOrderItem.OrderItemID = item.Id;

                            bool isCCProduct = ccService.IsProductForCc(item.ProductId);
                            if (isCCProduct)
                            {
                                var ccResult = ccService.GetCcResult(item.AttributesXml);
                                var mappings = _productAttributeParser.ParseProductAttributeMappings(item.AttributesXml);
                                var mapping = mappings.FirstOrDefault(x => x.ProductAttributeId == _customersCanvasSettings.CcIdAttributeId);
                                if (mapping == null)
                                    _logger.Error("Custom product does not have a ccID", null, customer);

                                var values = _productAttributeParser.ParseValues(item.AttributesXml, mapping.Id);
                                if (values == null || !values.Any())
                                    _logger.Error("Custom product ccID does not have a value", null, customer);

                                var selectedGreetingOption = GetGreetingOption(item);
                                var selectedGreetingOrientation = "H";
                                if (selectedGreetingOption.ToLower() == "yes")
                                {
                                     selectedGreetingOrientation = GetGreetingOrientation(item);
                                }
                                else if (selectedGreetingOption.ToLower() == "not found")
                                {
                                    _logger.Error("Greeting Option Selection not found for item: " + item.Product.Sku + "and orderid: " + item.OrderId, null, customer);
                                }

                                var selectedReturnAddressOption = GetReturnAddressEnvelopeOption(item);
                                var selectedReturnAddressSide = "F";
                                if (selectedReturnAddressOption.ToLower() == "yes")
                                {
                                    selectedReturnAddressSide = GetReturnAddressEnvelopeSide(item);
                                }
                                else if (selectedReturnAddressOption.ToLower() == "not found")
                                {
                                    _logger.Error("Return Address Option Selection not found for item: " +  item.Product.Sku + "and orderid: " + item.OrderId, null, customer);
                                }

                                var selectedCoverOrientation = GetCoverOrientation(item);
                                var selectedBackOrientation = GetBackOrientation(item);


                                var designId = Convert.ToInt32(values.First());
                                var design = ccService.GetDesign(designId);
                                dynamic designData = JsonConvert.DeserializeObject<Object>(design.Data);
                                extendedOrderItem.ccID = designId;
                                foreach(dynamic data in designData)
                                {
                                    string dataName = (string)data.Name;
                                    string stateID = (string)data;
                                    foreach (string cc in ccResult.HiResUrls)
                                    {
                                        if (cc.Contains(stateID))
                                        {
                                            bool add = true;
                                            ProductFileModel ccProduct = new ProductFileModel();
                                            ccProduct.product.productCode = item.Product.Sku;
                                            var index = cc.Split('/').Last<string>().Split('_').First<string>();
                                            string productType = dataName.Split('-').First<string>().ToLower();
                                            ccProduct.product.productType = productType + "-"+index;
                                            ccProduct.product.hiResPDFURL = cc;
                                            ccProduct.product.sourceReference = item.Id.ToString();
                                            ccProduct.requestSessionID = HttpContext.Current.Session.SessionID;

                                            #region NoteCard Processing
                                            #region Eliminate unneeded print files
                                            if (ccProduct.product.productType.ToLower() == "notecard-1" && selectedGreetingOption.ToLower() == "no") {
                                                //customer did not select a custom greeting so don't add the print file
                                                add = false;
                                            }
                                            if (productType == "envelope" && selectedReturnAddressOption.ToLower() == "no")
                                            {
                                                //customer did not select a custom envelope so don't add the print file
                                                add = false;
                                            } else if (productType == "envelope")
                                            {
                                                //if they did select a custom envelope, then add only the side they selected.
                                                if ((selectedReturnAddressSide == "F" && ccProduct.product.productType.ToLower() == "envelope-1") || (selectedReturnAddressSide == "B" && ccProduct.product.productType.ToLower() == "envelope-0"))
                                                {
                                                    add = false;
                                                }
                                            }

                                            #endregion Eliminate unneeded print files

                                            #region   Reset product types, orientation, color model and surface selections

                                            if (ccProduct.product.productType.ToLower() == "notecard-0")
                                            {
                                                //Card Front
                                                ccProduct.product.orientation = selectedCoverOrientation;
                                                ccProduct.product.productType = "notecard";
                                                ccProduct.product.surface = "front";
                                            }
                                            if (ccProduct.product.productType.ToLower() == "notecard-1")
                                            {
                                                //Card Greeting
                                                ccProduct.product.orientation = selectedGreetingOrientation;
                                                ccProduct.product.productType = "notecard";
                                                ccProduct.product.surface = "greeting";
                                                ccProduct.product.imprintColor = "1";
                                            }
                                            if (ccProduct.product.productType.ToLower() == "notecard-2")
                                            {
                                                //Card Back
                                                ccProduct.product.orientation = selectedBackOrientation;
                                                ccProduct.product.productType = "notecard";
                                                ccProduct.product.surface = "back";
                                            }
                                            if (productType == "envelope" )
                                            {
                                                ccProduct.product.productType = "envelope";
                                                ccProduct.product.surface = selectedReturnAddressSide;
                                                ccProduct.product.imprintColor = "1";
                                            }
                                            #endregion Reset product types, orientation and surface selections
                                            if (add)
                                            {
                                                ccFiles.Add(ccProduct);
                                            }
                                            #endregion NoteCard Processing

                                        }
                                    }

                                }


                            }
                            extendedOrderItems.Add(extendedOrderItem);
                        }




                        foreach(var item in extendedOrderItems)
                        {

                            Dictionary<string, string> paramDicEx = new Dictionary<string, string>();
                            paramDicEx.Add("@nopOrderItemID", item.OrderItemID.ToString());
                            paramDicEx.Add("@ccID", item.ccID.ToString());

                            insert = "INSERT INTO tblNOPOrderItem (nopOrderItemID, ccID) ";
                            insert += "VALUES ('" + item.OrderItemID + "', '" + item.ccID + "')";
                            manager.SetParameterizedQueryNoData(insert, paramDicEx);

                        }

                        //call file service to save files
                        string fileServiceaddress = _gbsOrderSettings.GBSPrintFileWebServiceAddress;
                        GBSFileService.GBSFileServiceClient FileService = new GBSFileService.GBSFileServiceClient();
                        if (ccFiles.Count > 0)
                        {
                            try
                            {
                                string response = FileService.CopyFilesToProduction(ccFiles, fileServiceaddress, _gbsOrderSettings.LoginId, _gbsOrderSettings.Password);
                                List<ProductFileModel> responseFiles = JsonConvert.DeserializeObject<List<ProductFileModel>>(response);
                                foreach (ProductFileModel product in responseFiles) {
                                    if (!String.IsNullOrEmpty(product.product.productionFileName) && !product.product.productionFileName.ToLower().Contains("exception"))
                                    {
                                        Dictionary<string, string> paramDicEx = new Dictionary<string, string>();
                                        paramDicEx.Add("@nopOrderItemID", product.product.sourceReference);
                                        paramDicEx.Add("@ProductType", product.product.productType);
                                        paramDicEx.Add("@FileName", product.product.productionFileName);

                                        insert = "INSERT INTO tblNOPProductionFiles (nopOrderItemID, ProductType,FileName) ";
                                        insert += "VALUES ('" + product.product.sourceReference + "', '" + product.product.productType + "', '" + product.product.productionFileName + "')";
                                        manager.SetParameterizedQueryNoData(insert, paramDicEx);
                                    }else
                                    {
                                        _logger.Error("Error with product filename" + response, null, customer);
                                    }
                                }

                            }
                            catch (Exception eee)
                            {
                                _logger.Error("Error accesing File Service", eee, customer);
                            }
                        }


                    }//if (myResult.PlacedOrder != null)
                    else
                    {
                        SaveFailedOrder(processPaymentRequest);

                    }
                }          


            }
            catch (Exception ex)
            {
                _logger.Error("Error in Order Service", ex, customer);
                throw ex;
            }

            return myResult;

        }

        public string GetReturnAddressEnvelopeOption(OrderItem item)
        {
            try
            {
                var mappings = _productAttributeParser.ParseProductAttributeMappings(item.AttributesXml);
                IList<string> pValues = null;
                foreach (ProductAttributeMapping pMapping in mappings)
                {

                    if (pMapping.ProductAttribute.Name != null && pMapping.ProductAttribute.Name.ToLower() == "add return address")
                    {
                        pValues = _productAttributeParser.ParseValues(item.AttributesXml, pMapping.Id);
                        break;
                    }
                }
                var paValues = _productAttributeParser.ParseProductAttributeValues(item.AttributesXml);
                foreach (ProductAttributeValue attr in paValues)
                {
                    if (attr.Id == Int32.Parse(pValues[0]))
                    {
                        return attr.Name;
                    }
                }
                return "not found";
            }catch (Exception ex)
            {
                var customer = _workContext.CurrentCustomer;
                _logger.Error("Error getting Return Address Option Value for item: " + item.Product.Sku + "and orderid: " + item.OrderId, ex, customer);
                return "not found";
            }
        }
        public string GetReturnAddressEnvelopeSide(OrderItem item)
        {
            try
            {
                var mappings = _productAttributeParser.ParseProductAttributeMappings(item.AttributesXml);
                IList<string> pValues = null;
                foreach (ProductAttributeMapping pMapping in mappings)
                {

                    if (pMapping.ProductAttribute.Name != null && pMapping.ProductAttribute.Name.ToLower() == "return address placement")
                    {
                        pValues = _productAttributeParser.ParseValues(item.AttributesXml, pMapping.Id);
                        if (pValues[0].ToLower() == "back side")
                        {
                            return "B";
                        }
                        else
                        {
                            return "F";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                var customer = _workContext.CurrentCustomer;
                _logger.Error("Error getting Return Address Side Value for item: " + item.Product.Sku + "and orderid: " + item.OrderId, ex, customer);
            }
            return "not found";
        }

        public string GetCoverOrientation(OrderItem item)
        {
            try
            {
                ICollection<ProductSpecificationAttribute> specifications = item.Product.ProductSpecificationAttributes;
                foreach (ProductSpecificationAttribute attr in specifications)
                {
                    if (attr.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "orientation")
                    {
                        if (attr.SpecificationAttributeOption.Name.ToLower() == "vertical")
                        {
                            return "V";
                        }
                        else
                        {
                            return "H";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                var customer = _workContext.CurrentCustomer;
                _logger.Error("Error getting Card Front Orientation for item: " + item.Product.Sku + "and orderid: " + item.OrderId, ex, customer);

            }
            return "H";
        }

        public string GetGreetingOrientation(OrderItem item)
        {
            try
            {
                ICollection<ProductSpecificationAttribute> specifications = item.Product.ProductSpecificationAttributes;
                foreach (ProductSpecificationAttribute attr in specifications)
                {
                    if (attr.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "orientation")
                    {
                        if (attr.SpecificationAttributeOption.Name.ToLower() == "vertical")
                        {
                            return "V";
                        } else 
                        {
                            return "H";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                var customer = _workContext.CurrentCustomer;
                _logger.Error("Error getting Card Greeting Orientation for item: " + item.Product.Sku + "and orderid: " + item.OrderId, ex, customer);

            }
            return "H";
        }

        public string GetBackOrientation(OrderItem item)
        {
            try
            {
                ICollection<ProductSpecificationAttribute> specifications = item.Product.ProductSpecificationAttributes;
                foreach (ProductSpecificationAttribute attr in specifications)
                {
                    if (attr.SpecificationAttributeOption.SpecificationAttribute.Name.ToLower() == "orientation")
                    {
                        if (attr.SpecificationAttributeOption.Name.ToLower() == "vertical")
                        {
                            return "V";
                        }
                        else
                        {
                            return "H";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                var customer = _workContext.CurrentCustomer;
                _logger.Error("Error getting Card Back Orientation for item: " + item.Product.Sku + "and orderid: " + item.OrderId, ex, customer);

            }
            return "H";
        }

        public string GetGreetingOption(OrderItem item)
        {
            try
            {
                var mappings = _productAttributeParser.ParseProductAttributeMappings(item.AttributesXml);
                IList<string> pValues = null;
                foreach (ProductAttributeMapping pMapping in mappings)
                {

                    if (pMapping.ProductAttribute.Name != null && pMapping.ProductAttribute.Name.ToLower() == "add greeting")
                    {
                        pValues = _productAttributeParser.ParseValues(item.AttributesXml, pMapping.Id);
                        break;
                    }
                }
                var paValues = _productAttributeParser.ParseProductAttributeValues(item.AttributesXml);
                foreach (ProductAttributeValue attr in paValues)
                {
                    if (attr.Id == Int32.Parse(pValues[0]))
                    {
                        return attr.Name;
                    }
                }
            }
            catch (Exception ex)
            {
                var customer = _workContext.CurrentCustomer;
                _logger.Error("Error getting Greeting Opton Value for item: " + item.Product.Sku + "and orderid: " + item.OrderId, ex, customer);
            }
            return "not found";
        }

        //GBS Custom Attribute Update
        protected override void SendNotificationsAndSaveNotes(Nop.Core.Domain.Orders.Order order)
        {

            Dictionary<string, Object> NotecardSetQty = GetNoteCardSetCount(order);
            foreach (var item in order.OrderItems)
            {
                if (NotecardSetQty.ContainsKey(item.ProductId.ToString()))
                {
                    item.AttributeDescription += "<br/>" + NotecardSetQty[item.ProductId.ToString()];
                }

            }
            base.SendNotificationsAndSaveNotes(order);
        }

        public Dictionary<string, object> GetNoteCardSetCount(Nop.Core.Domain.Orders.Order order)
        {
            var spec = EngineContext.Current.Resolve<ISpecificationAttributeService>();
            Dictionary<string, object> productSpecsDict = new Dictionary<string, object>();
            var customer = _workContext.CurrentCustomer;


            foreach (var item in order.OrderItems)
            {
                var specAttr = spec.GetProductSpecificationAttributes(item.ProductId);
                var option = specAttr.Select(x => x.SpecificationAttributeOption);
                var getOption = option.Where(x => x.SpecificationAttribute.DisplayOrder == 9999);
                if (getOption.Count<SpecificationAttributeOption>() > 0)
                {
                    if (!productSpecsDict.ContainsKey(item.ProductId.ToString()))
                        productSpecsDict.Add(item.ProductId.ToString(), getOption.FirstOrDefault().Name);

                }
            }

            return productSpecsDict;
        }
        public void SaveFailedOrder(ProcessPaymentRequest paymentRequest)
        {
            var cart = _workContext.CurrentCustomer.ShoppingCartItems;
           // opService.

        }
    }
    class ExtendedOrderItem
    {
        public int ID { get; set; }
        public int OrderItemID { get; set; }
        public int ccID { get; set; }

    }



}
