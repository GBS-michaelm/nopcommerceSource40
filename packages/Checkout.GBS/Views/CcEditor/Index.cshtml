@model List<Nop.Plugin.Widgets.CustomersCanvas.Data.EditorData>
@{
    Layout = "_AdminLayout";
}
<style>
    .nomrgnopdg {
        margin-left: 0px !important;
        margin-right: 0px !important;
        padding-left: 0px !important;
        padding-right: 0px !important;
        width: 700px;
    }
</style>

<input id="inputConfig" type="file" name="inputConfig" accept=".json" style="display: none;" />

<table class="table table-hover" style="margin-left:20px;margin-right:20px;">
    <div class="row">
        <div class="col-sm-10"></div>
        <div class="col-sm-2">
            <input id="inputEditor" type="file" accept=".zip" name="inputEditor" style="display: none;" />
            <button type="button" id="uploadEditor" class="btn btn-primary uploadEditor" style="margin-top:20px">+ Upload Editor</button>
        </div>
    </div>
    @if (Model.Count == 0)
    {
        <div class="jumbotron text-center">
            <h1 class="small">No editors are installed yet.</h1>
            <p>Upload a zip file with an editor or put it directly to the <code>Editors</code> folder of a plugin.</p>
            <p>
                <button type="button" class="btn btn-primary btn-lg uploadEditor" style="margin-top:20px">+ Upload Editor</button>
            </p>
        </div>
    }
    else
    {
        <thead>
        <th>Title</th>
        <th>Action</th>
        </thead>
        <tbody>
            @foreach (var editor in @Model)
            {
                <tr>
                    <td data-toggle="collapse" data-target="#@editor.Uid" class="clickable">
                        <p>
                            @editor.Title <small style="margin-left:10px">version @editor.Version</small><br />
                            <span style="color:#666666">@editor.Name</span>
                        </p>
                    </td>
                    <td>
                        <input id="file_@editor.Uid" type="file" accept=".zip" name="file_@editor.Uid" style="display: none;" />
                        <button type="button" id="update_@editor.Uid" class="btn btn-default updateedit">Update</button>
                        <button type="button" id="delete_@editor.Uid" data-foldername="@editor.FolderName" class="btn btn-danger deleteedit">Delete</button>
                    </td>
                </tr>
                <tr id="data_@editor.Uid">
                    <td colspan="3">
                        <div id="@editor.Uid" class="collapse">
                            @if (editor.AllConfigs.Count == 0)
                            {
                                <div class="jumbotron text-center">
                                    <h1 class="small">No configs are installed yet.</h1>
                                    <p>Upload a zip file with an editor or put it directly to the <code>Editors</code> folder of a plugin.</p>
                                    <p><button type="button" data-editorfolder="@editor.FolderName" class="btn btn-primary btn-lg uploadConfig">+ Upload Config</button></p>
                                </div>
                            }
                            else
                            {
                                <table class="table table-hover">
                                    <thead>
                                    <th>Config</th>
                                    <th>Action</th>
                                    </thead>
                                    <tbody>
                                        <div class="row">
                                            <div class="col-sm-10"></div>
                                            <div class="col-sm-2">
                                                <button type="button" id="uploadConfig" data-editorfolder="@editor.FolderName" class="btn btn-primary uploadConfig">+ Upload Config</button>
                                            </div>
                                        </div>
                                        @foreach (var config in @editor.AllConfigs)
                                        {
                                            <tr>
                                                <td>
                                                    <p>
                                                        @config.Title  <small style="margin-left:10px">version @config.Version </small><br />
                                                        <span style="color:#666666">@config.Name</span>
                                                    </p>
                                                </td>
                                                <td>
                                                    <input id="file_@config.Uid" data-filename="@config.FileName" data-editorfolder="@editor.FolderName" type="file" name="file_@config.Uid" accept=".json" style="display: none;" />
                                                    <button type="button" id="update_@config.Uid" class="btn btn-default updateconfig">Update</button>
                                                    <button type="button" id="delete_@config.Uid" class="btn btn-danger deleteconfig">Delete</button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }

                        </div>

                    </td>
                </tr>
            }
        </tbody>
    }
</table>

<script>
    $(".deleteedit").on('click', function () {
        var proof = confirm("Are you sure you want to delete that editor?");
        if (proof) {
            var that = this;
            var uid = this.id.split("_")[1];
            var foldername = $(this).attr('data-foldername');
            var data = { folderName: foldername };
            $.ajax({
                url: 'DeleteEditor',
                data: data,
                type: 'POST',
                success: function (response) {
                    if (response.status == 'success') {
                        $(that).closest("tr")[0].remove();
                        $("#data_" + uid).remove();
                    }
                    else {
                        console.error('error: ' + response.message);
                    }
                },
                error: function (xhr, textStatus, thrownError) {
                    console.error("filed to load" + this.url, textStatus, xhr.status, thrownError, xhr.responseText);
                }

            });
        }
    });
    $(".updateedit").on('click', function () {
        var uid = this.id.split("_")[1];
        $("#file_" + uid).on('change', function () {
            var $input = $(this);
            var fd = new FormData;
            fd.append('files', $input.prop('files')[0]);
            fd.append('isNew', 'false');

            sendFile('UploadEditor', fd, function () { location.reload(); });

            $("#file_" + uid).unbind("change");
        });
        $("#file_" + uid).click();
    });
    $(".uploadEditor").on('click', function () {
        $("#inputEditor").on('change', function () {
            var $input = $(this);
            var fd = new FormData;
            fd.append('files', $input.prop('files')[0]);
            sendFile('UploadEditor', fd, function () { location.reload(); });
            $("#inputEditor").unbind("change");
        });
        $("#inputEditor").click();
    });

    $(".updateconfig").on('click', function () {
        var uid = this.id.split("_")[1];
        $("#file_" + uid).on('change', function () {
            var $input = $(this);
            var fd = new FormData;
            var foldername = $("#file_" + uid).attr('data-editorfolder');
            fd.append('files', $input.prop('files')[0]);
            fd.append('editorFolder', foldername);

            sendFile('UploadConfig', fd, function () { location.reload(); });

            $("#file_" + uid).unbind("change");
        });
        $("#file_" + uid).click();
    });
    $(".deleteconfig").on('click', function () {
        var proof = confirm("Are you sure you want to delete that config?");
        if (proof) {
            var that = this;
            var uid = this.id.split("_")[1];
            var foldername = $("#file_" + uid).attr('data-editorfolder');
            var filename = $("#file_" + uid).attr('data-filename');
            var data = { editorFolder: foldername, fileName: filename };
            $.ajax({
                url: 'DeleteConfig',
                data: data,
                type: 'POST',
                success: function (response) {
                    if (response.status == 'success') {
                        $(that).closest("tr")[0].remove()
                    }
                    else {
                        console.error('error: ' + response.message);
                    }
                },
                error: function (xhr, textStatus, thrownError) {
                    console.error("filed to load" + this.url, textStatus, xhr.status, thrownError, xhr.responseText);
                }
            });
        }
    });
    $(".uploadConfig").on('click', function () {
        var that = this;
        $("#inputConfig").on('change', function () {
            var $input = $(this);
            var fd = new FormData;
            var foldername = $(that).attr('data-editorfolder');
            fd.append('isNew', true);
            fd.append('editorFolder', foldername);
            fd.append('files', $input.prop('files')[0]);
            sendFile('UploadConfig', fd, function () { location.reload(); });
            $("#inputConfig").unbind("change");
        });
        $("#inputConfig").click();
    });

    function sendFile(url, formData, successCallback) {
        window.ffdd = formData;
        $.ajax({
            url: url,
            data: formData,
            processData: false,
            contentType: false,
            type: 'POST',
            success: function (response) {
                if (response.status == 'success') {
                    successCallback();
                }
                else if (response.status == 'warning') {
                    var proof = confirm(response.message)
                    if (proof) {
                        var fd = window.ffdd;
                        fd.set('isNew', true);
                        this.data = fd;
                        $.ajax(this);
                    }
                }
                else if (response.status = 'error') {
                    console.error('error: ' + response.message);
                }
            },
            error: function (xhr, textStatus, thrownError) {
                console.error("filed to load" + this.url, textStatus, xhr.status, thrownError, xhr.responseText);
            }
        });
    }

</script>